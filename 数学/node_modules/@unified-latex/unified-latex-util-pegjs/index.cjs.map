{
  "version": 3,
  "sources": ["../index.ts", "../libs/decorate-array-for-pegjs.ts", "../libs/split-strings.ts", "../grammars/latex.pegjs", "../grammars/align-environment.pegjs", "../grammars/xparse-argspec.pegjs", "../grammars/pgfkeys.pegjs", "../grammars/macro-substitutions.pegjs", "../grammars/ligatures.pegjs", "../grammars/xcolor-expressions.pegjs", "../grammars/tabular-spec.pegjs", "../grammars/systeme-environment.pegjs", "../grammars/tex-glue.pegjs", "../libs/pegjs-parsers.ts"],
  "sourcesContent": ["export * from \"./libs/decorate-array-for-pegjs\";\nexport * from \"./libs/split-strings\";\nexport * from \"./libs/pegjs-parsers.js\";\n\n// NOTE: The docstring comment must be the last item in the index.ts file!\n/**\n * ## What is this?\n *\n * Pegjs grammars to help parse strings into a `unified-latex` Abstract Syntax Tree (AST). Note,\n * because of the dynamic nature of LaTeX, to get a full AST with arguments attached to macros, etc.,\n * the tree is parsed multiple times.\n * \n * Also included are functions to decorate a `Ast.Node[]` array so that Pegjs can process it as if it were\n * a string. This allows for complex second-pass parsing.\n *\n * ## When should I use this?\n *\n * If you are building libraries to parse specific LaTeX syntax (e.g., to parse `tabular` environments or\n * `systeme` environments, etc.).\n */\n", "type StringlikeArray = any[] & string;\n\n/**\n * Pegjs operates on strings. However, strings and arrays are very similar!\n * This function adds `charAt`, `charCodeAt`, and `substring` methods to\n * `array` so that `array` can then be fed to a Pegjs generated parser.\n *\n * @param {[object]} array\n * @returns {[object]}\n */\nexport function decorateArrayForPegjs(array: any[]): StringlikeArray {\n    (array as any).charAt = function (i: number) {\n        return this[i];\n    };\n    // We don't have a hope of imitating `charCodeAt`, so\n    // make it something that won't interfere\n    (array as any).charCodeAt = () => 0;\n    (array as any).substring = function (i: number, j: number) {\n        return this.slice(i, j);\n    };\n    // This function is called when reporting an error,\n    // so we convert back to a string.\n    (array as any).replace = function (a: string, b: string) {\n        const ret = JSON.stringify(this);\n        return ret.replace(a, b);\n    };\n    return array as StringlikeArray;\n}\n", "import * as Ast from \"@unified-latex/unified-latex-types\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\n\n/**\n * Splits all multi-character strings into strings that are all single characters.\n */\nexport function splitStringsIntoSingleChars(nodes: Ast.Node[]): Ast.Node[] {\n    return nodes.flatMap((node) =>\n        match.anyString(node)\n            ? (Array.from(node.content).map((c) => ({\n                  type: \"string\",\n                  content: c,\n              })) as Ast.Node[])\n            : node\n    );\n}\n", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { document: peg$parsedocument, math: peg$parsemath };\n    var peg$startRuleFunction = peg$parsedocument;\n\n    var peg$c0 = \"%\";\n    var peg$c1 = \".\";\n    var peg$c2 = \"verb*\";\n    var peg$c3 = \"verb\";\n    var peg$c4 = \"verbatim*\";\n    var peg$c5 = \"verbatim\";\n    var peg$c6 = \"filecontents*\";\n    var peg$c7 = \"filecontents\";\n    var peg$c8 = \"comment\";\n    var peg$c9 = \"lstlisting\";\n    var peg$c10 = \"[\";\n    var peg$c11 = \"]\";\n    var peg$c12 = \"(\";\n    var peg$c13 = \")\";\n    var peg$c14 = \"begin\";\n    var peg$c15 = \"end\";\n    var peg$c16 = \"equation*\";\n    var peg$c17 = \"equation\";\n    var peg$c18 = \"align*\";\n    var peg$c19 = \"align\";\n    var peg$c20 = \"alignat*\";\n    var peg$c21 = \"alignat\";\n    var peg$c22 = \"gather*\";\n    var peg$c23 = \"gather\";\n    var peg$c24 = \"multline*\";\n    var peg$c25 = \"multline\";\n    var peg$c26 = \"flalign*\";\n    var peg$c27 = \"flalign\";\n    var peg$c28 = \"split\";\n    var peg$c29 = \"math\";\n    var peg$c30 = \"displaymath\";\n    var peg$c31 = \"\\\\\";\n    var peg$c32 = \"{\";\n    var peg$c33 = \"}\";\n    var peg$c34 = \"$\";\n    var peg$c35 = \"&\";\n    var peg$c36 = \"\\r\";\n    var peg$c37 = \"\\n\";\n    var peg$c38 = \"\\r\\n\";\n    var peg$c39 = \"#\";\n    var peg$c40 = \"^\";\n    var peg$c41 = \"_\";\n    var peg$c42 = \"\\0\";\n\n    var peg$r0 = /^[ \\t]/;\n    var peg$r1 = /^[a-zA-Z]/;\n    var peg$r2 = /^[0-9]/;\n    var peg$r3 = /^[.,;:\\-*\\/()!?=+<>[\\]`'\"~]/;\n\n    var peg$e0 = peg$otherExpectation(\"document\");\n    var peg$e1 = peg$otherExpectation(\"math\");\n    var peg$e2 = peg$otherExpectation(\"token\");\n    var peg$e3 = peg$anyExpectation();\n    var peg$e4 = peg$otherExpectation(\"parbreak\");\n    var peg$e5 = peg$otherExpectation(\"math token\");\n    var peg$e6 = peg$otherExpectation(\"nonchar token\");\n    var peg$e7 = peg$literalExpectation(\"%\", false);\n    var peg$e8 = peg$otherExpectation(\"whitespace\");\n    var peg$e9 = peg$otherExpectation(\"number\");\n    var peg$e10 = peg$literalExpectation(\".\", false);\n    var peg$e11 = peg$otherExpectation(\"special macro\");\n    var peg$e12 = peg$literalExpectation(\"verb*\", false);\n    var peg$e13 = peg$literalExpectation(\"verb\", false);\n    var peg$e14 = peg$otherExpectation(\"verbatim environment\");\n    var peg$e15 = peg$literalExpectation(\"verbatim*\", false);\n    var peg$e16 = peg$literalExpectation(\"verbatim\", false);\n    var peg$e17 = peg$literalExpectation(\"filecontents*\", false);\n    var peg$e18 = peg$literalExpectation(\"filecontents\", false);\n    var peg$e19 = peg$literalExpectation(\"comment\", false);\n    var peg$e20 = peg$literalExpectation(\"lstlisting\", false);\n    var peg$e21 = peg$otherExpectation(\"macro\");\n    var peg$e22 = peg$otherExpectation(\"group\");\n    var peg$e23 = peg$otherExpectation(\"environment\");\n    var peg$e24 = peg$otherExpectation(\"math environment\");\n    var peg$e25 = peg$otherExpectation(\"math group\");\n    var peg$e26 = peg$literalExpectation(\"[\", false);\n    var peg$e27 = peg$literalExpectation(\"]\", false);\n    var peg$e28 = peg$literalExpectation(\"(\", false);\n    var peg$e29 = peg$literalExpectation(\")\", false);\n    var peg$e30 = peg$literalExpectation(\"begin\", false);\n    var peg$e31 = peg$literalExpectation(\"end\", false);\n    var peg$e32 = peg$literalExpectation(\"equation*\", false);\n    var peg$e33 = peg$literalExpectation(\"equation\", false);\n    var peg$e34 = peg$literalExpectation(\"align*\", false);\n    var peg$e35 = peg$literalExpectation(\"align\", false);\n    var peg$e36 = peg$literalExpectation(\"alignat*\", false);\n    var peg$e37 = peg$literalExpectation(\"alignat\", false);\n    var peg$e38 = peg$literalExpectation(\"gather*\", false);\n    var peg$e39 = peg$literalExpectation(\"gather\", false);\n    var peg$e40 = peg$literalExpectation(\"multline*\", false);\n    var peg$e41 = peg$literalExpectation(\"multline\", false);\n    var peg$e42 = peg$literalExpectation(\"flalign*\", false);\n    var peg$e43 = peg$literalExpectation(\"flalign\", false);\n    var peg$e44 = peg$literalExpectation(\"split\", false);\n    var peg$e45 = peg$literalExpectation(\"math\", false);\n    var peg$e46 = peg$literalExpectation(\"displaymath\", false);\n    var peg$e47 = peg$otherExpectation(\"escape\");\n    var peg$e48 = peg$literalExpectation(\"\\\\\", false);\n    var peg$e49 = peg$literalExpectation(\"{\", false);\n    var peg$e50 = peg$literalExpectation(\"}\", false);\n    var peg$e51 = peg$literalExpectation(\"$\", false);\n    var peg$e52 = peg$literalExpectation(\"&\", false);\n    var peg$e53 = peg$otherExpectation(\"newline\");\n    var peg$e54 = peg$literalExpectation(\"\\r\", false);\n    var peg$e55 = peg$literalExpectation(\"\\n\", false);\n    var peg$e56 = peg$literalExpectation(\"\\r\\n\", false);\n    var peg$e57 = peg$literalExpectation(\"#\", false);\n    var peg$e58 = peg$literalExpectation(\"^\", false);\n    var peg$e59 = peg$literalExpectation(\"_\", false);\n    var peg$e60 = peg$literalExpectation(\"\\0\", false);\n    var peg$e61 = peg$classExpectation([\" \", \"\\t\"], false, false);\n    var peg$e62 = peg$otherExpectation(\"letter\");\n    var peg$e63 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$e64 = peg$otherExpectation(\"digit\");\n    var peg$e65 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$e66 = peg$otherExpectation(\"punctuation\");\n    var peg$e67 = peg$classExpectation([\".\", \",\", \";\", \":\", \"-\", \"*\", \"/\", \"(\", \")\", \"!\", \"?\", \"=\", \"+\", \"<\", \">\", \"[\", \"]\", \"`\", \"'\", \"\\\"\", \"~\"], false, false);\n    var peg$e68 = peg$otherExpectation(\"full comment\");\n    var peg$e69 = peg$otherExpectation(\"comment\");\n\n    var peg$f0 = function(content) { return createNode(\"root\", { content }); };\n    var peg$f1 = function(t) { return t; };\n    var peg$f2 = function(eq) {\n                return createNode(\"inlinemath\", { content: eq });\n            };\n    var peg$f3 = function(s) { return createNode(\"string\", { content: s }); };\n    var peg$f4 = function() { return createNode(\"parbreak\"); };\n    var peg$f5 = function(x) { return x; };\n    var peg$f6 = function() {\n                return createNode(\"macro\", { content: \"^\", escapeToken: \"\" });\n            };\n    var peg$f7 = function() {\n                return createNode(\"macro\", { content: \"_\", escapeToken: \"\" });\n            };\n    var peg$f8 = function() {\n                return createNode(\"whitespace\");\n            };\n    var peg$f9 = function(a, b) { return a.join(\"\") + \".\" + b.join(\"\"); };\n    var peg$f10 = function(b) { return \".\" + b.join(\"\"); };\n    var peg$f11 = function(a) { return a.join(\"\") + \".\"; };\n    var peg$f12 = function(env, e, end) { return end == e; };\n    var peg$f13 = function(env, e, x) { return x; };\n    var peg$f14 = function(env, e, x, end) { return end == e; };\n    var peg$f15 = function(env, e, x) {\n                return createNode(\"verb\", {\n                    env: env,\n                    escape: e,\n                    content: x.join(\"\"),\n                });\n            };\n    var peg$f16 = function(x) { return createNode(\"displaymath\", { content: x }); };\n    var peg$f17 = function(x) { return createNode(\"inlinemath\", { content: x }); };\n    var peg$f18 = function(env, end_env) { return compare_env({ content: [env] }, end_env); };\n    var peg$f19 = function(env, x) { return x; };\n    var peg$f20 = function(env, body) {\n                return createNode(\"verbatim\", {\n                    env: env,\n                    content: body.join(\"\"),\n                });\n            };\n    var peg$f21 = function(n) { return n.join(\"\"); };\n    var peg$f22 = function(n) { return n; };\n    var peg$f23 = function(m) {\n                return createNode(\"macro\", { content: m });\n            };\n    var peg$f24 = function(c) { return c; };\n    var peg$f25 = function(x) {\n                return createNode(\"group\", { content: x });\n            };\n    var peg$f26 = function(g) { return text().slice(1, -1); };\n    var peg$f27 = function(env, env_comment, end_env) { return compare_env(env, end_env); };\n    var peg$f28 = function(env, env_comment, x) { return x; };\n    var peg$f29 = function(env, env_comment, body) {\n                return createNode(\"environment\", {\n                    env,\n                    content: env_comment ? [env_comment, ...body] : body,\n                });\n            };\n    var peg$f30 = function(env, env_comment, end_env) { return compare_env({ content: [env] }, end_env); };\n    var peg$f31 = function(env, env_comment, body) {\n                return createNode(\"mathenv\", {\n                    env: env,\n                    content: env_comment ? [env_comment, ...body] : body,\n                });\n            };\n    var peg$f32 = function(e) { return createNode(\"string\", { content: e }); };\n    var peg$f33 = function() { return createNode(\"string\", { content: \"\\\\\" }); };\n    var peg$f34 = function() { return \" \"; };\n    var peg$f35 = function(p) {\n                return createNode(\"string\", { content: p });\n            };\n    var peg$f36 = function(leading_sp, comment) {\n                return createNode(\"comment\", {\n                    ...comment,\n                    sameline: false,\n                    leadingWhitespace: leading_sp.length > 0,\n                });\n            };\n    var peg$f37 = function(spaces, x) {\n                return createNode(\"comment\", {\n                    ...x,\n                    sameline: true,\n                    leadingWhitespace: spaces.length > 0,\n                });\n            };\n    var peg$f38 = function(c) {\n                return { content: c.join(\"\"), suffixParbreak: true };\n            };\n    var peg$f39 = function(c) { return { content: c.join(\"\") }; };\n    var peg$f40 = function() {\n                var loc = location();\n                return loc.start.column === 1;\n            };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsedocument() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsetoken();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsetoken();\n      }\n      peg$savedPos = s0;\n      s1 = peg$f0(s1);\n      s0 = s1;\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n\n      return s0;\n    }\n\n    function peg$parsemath() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      s1 = peg$parsemath_token();\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsemath_token();\n      }\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\n\n      return s0;\n    }\n\n    function peg$parsetoken() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$parsespecial_macro();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsemacro();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefull_comment();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsegroup();\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsemath_shift();\n              if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                peg$silentFails++;\n                s5 = peg$parsemath_shift();\n                peg$silentFails--;\n                if (s5 === peg$FAILED) {\n                  s4 = undefined;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsemath_token();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s3 = peg$f1(s5);\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$currPos;\n                    s4 = peg$currPos;\n                    peg$silentFails++;\n                    s5 = peg$parsemath_shift();\n                    peg$silentFails--;\n                    if (s5 === peg$FAILED) {\n                      s4 = undefined;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsemath_token();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s3 = peg$f1(s5);\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  }\n                } else {\n                  s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parsemath_shift();\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f2(s2);\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealignment_tab();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparbreak();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsemacro_parameter();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseignore();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsenumber();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsewhitespace();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parsepunctuation();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              s1 = peg$currPos;\n                              s2 = [];\n                              s3 = peg$currPos;\n                              s4 = peg$currPos;\n                              peg$silentFails++;\n                              s5 = peg$parsenonchar_token();\n                              peg$silentFails--;\n                              if (s5 === peg$FAILED) {\n                                s4 = undefined;\n                              } else {\n                                peg$currPos = s4;\n                                s4 = peg$FAILED;\n                              }\n                              if (s4 !== peg$FAILED) {\n                                if (input.length > peg$currPos) {\n                                  s5 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s5 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                                }\n                                if (s5 !== peg$FAILED) {\n                                  s4 = [s4, s5];\n                                  s3 = s4;\n                                } else {\n                                  peg$currPos = s3;\n                                  s3 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s3;\n                                s3 = peg$FAILED;\n                              }\n                              if (s3 !== peg$FAILED) {\n                                while (s3 !== peg$FAILED) {\n                                  s2.push(s3);\n                                  s3 = peg$currPos;\n                                  s4 = peg$currPos;\n                                  peg$silentFails++;\n                                  s5 = peg$parsenonchar_token();\n                                  peg$silentFails--;\n                                  if (s5 === peg$FAILED) {\n                                    s4 = undefined;\n                                  } else {\n                                    peg$currPos = s4;\n                                    s4 = peg$FAILED;\n                                  }\n                                  if (s4 !== peg$FAILED) {\n                                    if (input.length > peg$currPos) {\n                                      s5 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s5 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                                    }\n                                    if (s5 !== peg$FAILED) {\n                                      s4 = [s4, s5];\n                                      s3 = s4;\n                                    } else {\n                                      peg$currPos = s3;\n                                      s3 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s3;\n                                    s3 = peg$FAILED;\n                                  }\n                                }\n                              } else {\n                                s2 = peg$FAILED;\n                              }\n                              if (s2 !== peg$FAILED) {\n                                s1 = input.substring(s1, peg$currPos);\n                              } else {\n                                s1 = s2;\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$f3(s1);\n                              }\n                              s0 = s1;\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$parsebegin_group();\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$parseend_group();\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$parsemath_shift();\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$currPos;\n                                      if (input.length > peg$currPos) {\n                                        s1 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                                      }\n                                      if (s1 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$f3(s1);\n                                      }\n                                      s0 = s1;\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseparbreak() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      s3 = peg$parsesp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsesp();\n      }\n      s3 = peg$parsenl();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = [];\n        s7 = peg$parsesp();\n        while (s7 !== peg$FAILED) {\n          s6.push(s7);\n          s7 = peg$parsesp();\n        }\n        s7 = peg$parsenl();\n        if (s7 !== peg$FAILED) {\n          s6 = [s6, s7];\n          s5 = s6;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = [];\n            s7 = peg$parsesp();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parsesp();\n            }\n            s7 = peg$parsenl();\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesp();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesp();\n          }\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parsecomment_start();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = undefined;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            s2 = [s2, s3, s4, s5, s6];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsesp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsesp();\n        }\n        s3 = peg$parsenl();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = [];\n          s7 = peg$parsesp();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsesp();\n          }\n          s7 = peg$parsenl();\n          if (s7 !== peg$FAILED) {\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = [];\n              s7 = peg$parsesp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsesp();\n              }\n              s7 = peg$parsenl();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f4();\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e4); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemath_token() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$parsespecial_macro();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsemacro();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefull_comment();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsewhitespace();\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$parsewhitespace();\n            }\n            s2 = peg$parsegroup();\n            if (s2 !== peg$FAILED) {\n              s3 = [];\n              s4 = peg$parsewhitespace();\n              while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsewhitespace();\n              }\n              peg$savedPos = s0;\n              s0 = peg$f5(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = [];\n              s2 = peg$parsewhitespace();\n              while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsewhitespace();\n              }\n              s2 = peg$parsealignment_tab();\n              if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsewhitespace();\n                while (s4 !== peg$FAILED) {\n                  s3.push(s4);\n                  s4 = peg$parsewhitespace();\n                }\n                peg$savedPos = s0;\n                s0 = peg$f5(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parsewhitespace();\n                while (s2 !== peg$FAILED) {\n                  s1.push(s2);\n                  s2 = peg$parsewhitespace();\n                }\n                s2 = peg$parsemacro_parameter();\n                if (s2 !== peg$FAILED) {\n                  s3 = [];\n                  s4 = peg$parsewhitespace();\n                  while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsewhitespace();\n                  }\n                  peg$savedPos = s0;\n                  s0 = peg$f5(s2);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = [];\n                  s2 = peg$parsewhitespace();\n                  while (s2 !== peg$FAILED) {\n                    s1.push(s2);\n                    s2 = peg$parsewhitespace();\n                  }\n                  s2 = peg$parsesuperscript();\n                  if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parsewhitespace();\n                    while (s4 !== peg$FAILED) {\n                      s3.push(s4);\n                      s4 = peg$parsewhitespace();\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f6();\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = [];\n                    s2 = peg$parsewhitespace();\n                    while (s2 !== peg$FAILED) {\n                      s1.push(s2);\n                      s2 = peg$parsewhitespace();\n                    }\n                    s2 = peg$parsesubscript();\n                    if (s2 !== peg$FAILED) {\n                      s3 = [];\n                      s4 = peg$parsewhitespace();\n                      while (s4 !== peg$FAILED) {\n                        s3.push(s4);\n                        s4 = peg$parsewhitespace();\n                      }\n                      peg$savedPos = s0;\n                      s0 = peg$f7();\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseignore();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsewhitespace();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.length > peg$currPos) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$f3(s1);\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenonchar_token() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parseescape();\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c0;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e7); }\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsebegin_group();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseend_group();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsemath_shift();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealignment_tab();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsenl();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsemacro_parameter();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseignore();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsesp();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsepunctuation();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseEOF();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsenl();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesp();\n        }\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsesp();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsesp();\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenl();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parsecomment_start();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = undefined;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsesp();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsesp();\n              }\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$parsenl();\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = undefined;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = [];\n          s2 = peg$parsesp();\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$parsesp();\n            }\n          } else {\n            s1 = peg$FAILED;\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f8();\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      s3 = peg$parsenum();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsenum();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s3 = peg$c1;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e10); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsenum();\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsenum();\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f9(s2, s4);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c1;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e10); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsenum();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsenum();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f10(s3);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = [];\n          s3 = peg$parsenum();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsenum();\n            }\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s3 = peg$c1;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e10); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s1 = peg$f11(s2);\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsespecial_macro() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c2) {\n          s2 = peg$c2;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e12); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c3) {\n            s2 = peg$c3;\n            peg$currPos += 4;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e13); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e3); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$currPos;\n            if (input.length > peg$currPos) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s8 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s9 = peg$f12(s2, s3, s8);\n              if (s9) {\n                s9 = undefined;\n              } else {\n                s9 = peg$FAILED;\n              }\n              if (s9 !== peg$FAILED) {\n                s8 = [s8, s9];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e3); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s5 = peg$f13(s2, s3, s7);\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$currPos;\n              if (input.length > peg$currPos) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e3); }\n              }\n              if (s8 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s9 = peg$f12(s2, s3, s8);\n                if (s9) {\n                  s9 = undefined;\n                } else {\n                  s9 = peg$FAILED;\n                }\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = undefined;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s5 = peg$f13(s2, s3, s7);\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n            s5 = peg$currPos;\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s7 = peg$f14(s2, s3, s4, s6);\n              if (s7) {\n                s7 = undefined;\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f15(s2, s3, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseverbatim_environment();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsebegin_display_math();\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseend_display_math();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = undefined;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsemath_token();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f5(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$currPos;\n              s4 = peg$currPos;\n              peg$silentFails++;\n              s5 = peg$parseend_display_math();\n              peg$silentFails--;\n              if (s5 === peg$FAILED) {\n                s4 = undefined;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsemath_token();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s3 = peg$f5(s5);\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            }\n            s3 = peg$parseend_display_math();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f16(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsebegin_inline_math();\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$currPos;\n              s4 = peg$currPos;\n              peg$silentFails++;\n              s5 = peg$parseend_inline_math();\n              peg$silentFails--;\n              if (s5 === peg$FAILED) {\n                s4 = undefined;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsemath_token();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s3 = peg$f5(s5);\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                peg$silentFails++;\n                s5 = peg$parseend_inline_math();\n                peg$silentFails--;\n                if (s5 === peg$FAILED) {\n                  s4 = undefined;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsemath_token();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s3 = peg$f5(s5);\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              }\n              s3 = peg$parseend_inline_math();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f17(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsemath_shift();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parsemath_shift();\n                if (s2 !== peg$FAILED) {\n                  s3 = [];\n                  s4 = peg$currPos;\n                  s5 = peg$currPos;\n                  peg$silentFails++;\n                  s6 = peg$currPos;\n                  s7 = peg$parsemath_shift();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsemath_shift();\n                    if (s8 !== peg$FAILED) {\n                      s7 = [s7, s8];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                  peg$silentFails--;\n                  if (s6 === peg$FAILED) {\n                    s5 = undefined;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parsemath_token();\n                    if (s6 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s4 = peg$f5(s6);\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                  while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$currPos;\n                    s5 = peg$currPos;\n                    peg$silentFails++;\n                    s6 = peg$currPos;\n                    s7 = peg$parsemath_shift();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsemath_shift();\n                      if (s8 !== peg$FAILED) {\n                        s7 = [s7, s8];\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                    peg$silentFails--;\n                    if (s6 === peg$FAILED) {\n                      s5 = undefined;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsemath_token();\n                      if (s6 !== peg$FAILED) {\n                        peg$savedPos = s4;\n                        s4 = peg$f5(s6);\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  }\n                  s4 = peg$parsemath_shift();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsemath_shift();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f16(s3);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsemath_environment();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseenvironment();\n                }\n              }\n            }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseverbatim_environment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_env();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebegin_group();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseverbatim_env_name();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseend_group();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$currPos;\n              s9 = peg$parseend_env();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parsegroup();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s11 = peg$f18(s3, s10);\n                  if (s11) {\n                    s11 = undefined;\n                  } else {\n                    s11 = peg$FAILED;\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s9 = [s9, s10, s11];\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                }\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s6 = peg$f19(s3, s8);\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$currPos;\n                peg$silentFails++;\n                s8 = peg$currPos;\n                s9 = peg$parseend_env();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsegroup();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = peg$currPos;\n                    s11 = peg$f18(s3, s10);\n                    if (s11) {\n                      s11 = undefined;\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s9 = [s9, s10, s11];\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = undefined;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s6 = peg$f19(s3, s8);\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n              s6 = peg$parseend_env();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsebegin_group();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseverbatim_env_name();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseend_group();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f20(s3, s5);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseverbatim_env_name() {\n      var s0;\n\n      if (input.substr(peg$currPos, 9) === peg$c4) {\n        s0 = peg$c4;\n        peg$currPos += 9;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e15); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8) === peg$c5) {\n          s0 = peg$c5;\n          peg$currPos += 8;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e16); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 13) === peg$c6) {\n            s0 = peg$c6;\n            peg$currPos += 13;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e17); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 12) === peg$c7) {\n              s0 = peg$c7;\n              peg$currPos += 12;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e18); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7) === peg$c8) {\n                s0 = peg$c8;\n                peg$currPos += 7;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e19); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 10) === peg$c9) {\n                  s0 = peg$c9;\n                  peg$currPos += 10;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e20); }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemacro() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseescape();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsechar();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsechar();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s1;\n          s1 = peg$f21(s3);\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseescape();\n        if (s2 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e3); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f22(s3);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f23(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e21); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_group();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseend_group();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = undefined;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsetoken();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f24(s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseend_group();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = undefined;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetoken();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f24(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        s3 = peg$parseend_group();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f25(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e22); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup_contents_as_string() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsegroup();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f26(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseenvironment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_env();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsegroup_contents_as_string();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesameline_comment();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$currPos;\n          s8 = peg$parseend_env();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parsegroup_contents_as_string();\n            if (s9 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s10 = peg$f27(s2, s3, s9);\n              if (s10) {\n                s10 = undefined;\n              } else {\n                s10 = peg$FAILED;\n              }\n              if (s10 !== peg$FAILED) {\n                s8 = [s8, s9, s10];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = undefined;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetoken();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s5;\n              s5 = peg$f28(s2, s3, s7);\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$currPos;\n            s8 = peg$parseend_env();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parsegroup_contents_as_string();\n              if (s9 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s10 = peg$f27(s2, s3, s9);\n                if (s10) {\n                  s10 = undefined;\n                } else {\n                  s10 = peg$FAILED;\n                }\n                if (s10 !== peg$FAILED) {\n                  s8 = [s8, s9, s10];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetoken();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s5 = peg$f28(s2, s3, s7);\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          s5 = peg$parseend_env();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsegroup_contents_as_string();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f29(s2, s3, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e23); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemath_environment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_env();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebegin_group();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemath_env_name();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseend_group();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsesameline_comment();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$currPos;\n              peg$silentFails++;\n              s9 = peg$currPos;\n              s10 = peg$parseend_env();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsegroup();\n                if (s11 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s12 = peg$f30(s3, s5, s11);\n                  if (s12) {\n                    s12 = undefined;\n                  } else {\n                    s12 = peg$FAILED;\n                  }\n                  if (s12 !== peg$FAILED) {\n                    s10 = [s10, s11, s12];\n                    s9 = s10;\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s9;\n                s9 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s9 === peg$FAILED) {\n                s8 = undefined;\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsemath_token();\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s7;\n                  s7 = peg$f28(s3, s5, s9);\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$currPos;\n                peg$silentFails++;\n                s9 = peg$currPos;\n                s10 = peg$parseend_env();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsegroup();\n                  if (s11 !== peg$FAILED) {\n                    peg$savedPos = peg$currPos;\n                    s12 = peg$f30(s3, s5, s11);\n                    if (s12) {\n                      s12 = undefined;\n                    } else {\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      s10 = [s10, s11, s12];\n                      s9 = s10;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s9 === peg$FAILED) {\n                  s8 = undefined;\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsemath_token();\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s7;\n                    s7 = peg$f28(s3, s5, s9);\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              s7 = peg$parseend_env();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsebegin_group();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsemath_env_name();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseend_group();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f31(s3, s5, s6);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e24); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemath_group() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_group();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseend_group();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = undefined;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemath_token();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f24(s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseend_group();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = undefined;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsemath_token();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f24(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        s3 = peg$parseend_group();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f25(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e25); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_display_math() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s2 = peg$c10;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e26); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseend_display_math() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s2 = peg$c11;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e27); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_inline_math() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c12;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e28); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseend_inline_math() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e29); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_env() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c14) {\n          s2 = peg$c14;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e30); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseend_env() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c15) {\n          s2 = peg$c15;\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e31); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemath_env_name() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9) === peg$c16) {\n        s1 = peg$c16;\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e32); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8) === peg$c17) {\n          s1 = peg$c17;\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e33); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c18) {\n            s1 = peg$c18;\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e34); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 5) === peg$c19) {\n              s1 = peg$c19;\n              peg$currPos += 5;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e35); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 8) === peg$c20) {\n                s1 = peg$c20;\n                peg$currPos += 8;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e36); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7) === peg$c21) {\n                  s1 = peg$c21;\n                  peg$currPos += 7;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e37); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 7) === peg$c22) {\n                    s1 = peg$c22;\n                    peg$currPos += 7;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e38); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6) === peg$c23) {\n                      s1 = peg$c23;\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$e39); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 9) === peg$c24) {\n                        s1 = peg$c24;\n                        peg$currPos += 9;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$e40); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 8) === peg$c25) {\n                          s1 = peg$c25;\n                          peg$currPos += 8;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$e41); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 8) === peg$c26) {\n                            s1 = peg$c26;\n                            peg$currPos += 8;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$e42); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 7) === peg$c27) {\n                              s1 = peg$c27;\n                              peg$currPos += 7;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$e43); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5) === peg$c28) {\n                                s1 = peg$c28;\n                                peg$currPos += 5;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$e44); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c29) {\n                                  s1 = peg$c29;\n                                  peg$currPos += 4;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$e45); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 11) === peg$c30) {\n                                    s1 = peg$c30;\n                                    peg$currPos += 11;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$e46); }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f32(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseescape() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c31;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e48); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f33();\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e47); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_group() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c32;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e49); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseend_group() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s1 = peg$c33;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e50); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemath_shift() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s1 = peg$c34;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e51); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsealignment_tab() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s1 = peg$c35;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e52); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenl() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s2 = peg$c36;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e54); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = undefined;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s2 = peg$c37;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e55); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 13) {\n          s0 = peg$c36;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e54); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c38) {\n            s0 = peg$c38;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e56); }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e53); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemacro_parameter() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c39;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e57); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsesuperscript() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 94) {\n        s1 = peg$c40;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e58); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsesubscript() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 95) {\n        s1 = peg$c41;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e59); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseignore() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 0) {\n        s0 = peg$c42;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e60); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesp() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$r0.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e61); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$r0.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e61); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f34();\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e63); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e62); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenum() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$r2.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e65); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e64); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepunctuation() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (peg$r3.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e67); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f35(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e66); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment_start() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 37) {\n        s0 = peg$c0;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefull_comment() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parseownline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesameline_comment();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e68); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseownline_comment() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      s3 = peg$parsesp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsesp();\n      }\n      s3 = peg$parsenl();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      s2 = peg$parseleading_sp();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomment();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f36(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesameline_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsesp();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsesp();\n      }\n      s2 = peg$parsecomment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f37(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsecomment_start();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenl();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = undefined;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e3); }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f24(s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parsenl();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = undefined;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f24(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseparbreak();\n        peg$silentFails--;\n        if (s4 !== peg$FAILED) {\n          peg$currPos = s3;\n          s3 = undefined;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f38(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecomment_start();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parsenl();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = undefined;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f24(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parsenl();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = undefined;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e3); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f24(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$currPos;\n          s4 = peg$parsenl();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesp();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesp();\n            }\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parsecomment_start();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsenl();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseEOF();\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f39(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e69); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseleading_sp() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsestart_of_line();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesp();\n        }\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsestart_of_line() {\n      var s0;\n\n      peg$savedPos = peg$currPos;\n      s0 = peg$f40();\n      if (s0) {\n        s0 = undefined;\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOF() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        function toString(e) {\n            if (typeof e === \"string\") {\n                return e;\n            }\n            if (typeof e.content === \"string\") {\n                return e.content;\n            }\n            if (e && e.type === \"whitespace\") {\n                return \" \";\n            }\n            return e;\n        }\n\n        function compare_env(g1, g2) {\n            const g1Name =\n                typeof g1 === \"string\" ? g1 : g1.content.map(toString).join(\"\");\n            const g2Name =\n                typeof g2 === \"string\" ? g2 : g2.content.map(toString).join(\"\");\n            return g1Name === g2Name;\n        }\n\n        function createNode(type, extra = {}) {\n            return { type, ...extra, position: location() };\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$anyExpectation();\n\n    var peg$f0 = function() { return []; };\n    var peg$f1 = function(x) { return { cells: [], colSeps: [], ...x }; };\n    var peg$f2 = function(rowItems, rowSep, trailingComment) {\n                return { ...rowItems, rowSep, trailingComment };\n            };\n    var peg$f3 = function(rowItems, trailingComment) {\n                return { ...rowItems, rowSep: null, trailingComment };\n            };\n    var peg$f4 = function(x) { return x; };\n    var peg$f5 = function(x) {\n                return {\n                    cells: [],\n                    colSeps: [],\n                    rowSep: null,\n                    trailingComment: x,\n                };\n            };\n    var peg$f6 = function(x) {\n                return x;\n            };\n    var peg$f7 = function(colSep, cell) { return { colSep, cell }; };\n    var peg$f8 = function(colSep) { return { colSep }; };\n    var peg$f9 = function(a, b) { return processRow(a, b); };\n    var peg$f10 = function(b) { return processRow(null, b); };\n    var peg$f11 = function(tok) { return options.isSameLineComment(tok); };\n    var peg$f12 = function(tok) { return tok; };\n    var peg$f13 = function(tok) { return options.isOwnLineComment(tok); };\n    var peg$f14 = function(tok) { return options.isWhitespace(tok); };\n    var peg$f15 = function(tok) { return options.isRowSep(tok); };\n    var peg$f16 = function(tok) { return options.isColSep(tok); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1;\n\n      s0 = [];\n      s1 = peg$parsecomment_only_line();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parserow_with_end();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parserow_without_end();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsecomment_only_line();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parserow_with_end();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parserow_without_end();\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseEOL();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f0();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parserow_with_end() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parserow_items();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      peg$savedPos = s1;\n      s2 = peg$f1(s2);\n      s1 = s2;\n      s2 = peg$parserow_sep();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetrailing_comment();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f2(s1, s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parserow_without_end() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parserow_items();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetrailing_comment();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f3(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetrailing_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n      }\n      s2 = peg$parsesame_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f4(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment_only_line() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n      }\n      s2 = peg$parseown_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f5(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetoken() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parserow_sep();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecol_sep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsetrailing_comment();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseown_line_comment();\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = undefined;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecell() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsetoken();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsetoken();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseseparated_cell() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecol_sep();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecell();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f7(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecol_sep();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f8(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parserow_items() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecell();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseseparated_cell();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseseparated_cell();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f9(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseseparated_cell();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseseparated_cell();\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f10(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesame_line_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f11(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseown_line_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f13(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f14(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parserow_sep() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f15(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecol_sep() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f16(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        function processRow(leadCell, otherCells) {\n            const cells = [leadCell || []];\n            const seps = [];\n            for (const x of otherCells) {\n                cells.push(x.cell || []);\n                seps.push(x.colSep);\n            }\n            return { cells, colSeps: seps };\n        }\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isWhitespace) {\n            try {\n                Object.assign(\n                    options,\n                    createMatchers([\"\\\\\", \"hline\", \"cr\"], [\"&\"])\n                );\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { args_spec_list: peg$parseargs_spec_list };\n    var peg$startRuleFunction = peg$parseargs_spec_list;\n\n    var peg$c0 = \"+\";\n    var peg$c1 = \"v\";\n    var peg$c2 = \"b\";\n    var peg$c3 = \"!\";\n    var peg$c4 = \"D\";\n    var peg$c5 = \"d\";\n    var peg$c6 = \"s\";\n    var peg$c7 = \"O\";\n    var peg$c8 = \"o\";\n    var peg$c9 = \"e\";\n    var peg$c10 = \"E\";\n    var peg$c11 = \"t\";\n    var peg$c12 = \"R\";\n    var peg$c13 = \"r\";\n    var peg$c14 = \"m\";\n    var peg$c15 = \"{\";\n    var peg$c16 = \"}\";\n    var peg$c17 = \" \";\n    var peg$c18 = \"\\n\";\n    var peg$c19 = \"\\r\";\n\n\n    var peg$e0 = peg$literalExpectation(\"+\", false);\n    var peg$e1 = peg$literalExpectation(\"v\", false);\n    var peg$e2 = peg$anyExpectation();\n    var peg$e3 = peg$literalExpectation(\"b\", false);\n    var peg$e4 = peg$literalExpectation(\"!\", false);\n    var peg$e5 = peg$literalExpectation(\"D\", false);\n    var peg$e6 = peg$literalExpectation(\"d\", false);\n    var peg$e7 = peg$literalExpectation(\"s\", false);\n    var peg$e8 = peg$literalExpectation(\"O\", false);\n    var peg$e9 = peg$literalExpectation(\"o\", false);\n    var peg$e10 = peg$literalExpectation(\"e\", false);\n    var peg$e11 = peg$literalExpectation(\"E\", false);\n    var peg$e12 = peg$literalExpectation(\"t\", false);\n    var peg$e13 = peg$literalExpectation(\"R\", false);\n    var peg$e14 = peg$literalExpectation(\"r\", false);\n    var peg$e15 = peg$literalExpectation(\"m\", false);\n    var peg$e16 = peg$literalExpectation(\"{\", false);\n    var peg$e17 = peg$literalExpectation(\"}\", false);\n    var peg$e18 = peg$literalExpectation(\" \", false);\n    var peg$e19 = peg$literalExpectation(\"\\n\", false);\n    var peg$e20 = peg$literalExpectation(\"\\r\", false);\n\n    var peg$f0 = function(x) { return x; };\n    var peg$f1 = function(spec) { return spec; };\n    var peg$f2 = function(spec) {\n                return spec;\n            };\n    var peg$f3 = function(openBrace) {\n                return createNode(\"verbatim\", { openBrace, closeBrace: openBrace });\n            };\n    var peg$f4 = function() { return createNode(\"body\"); };\n    var peg$f5 = function(leading_bang, spec) {\n                return leading_bang ? { ...spec, noLeadingWhitespace: true } : spec;\n            };\n    var peg$f6 = function(braceSpec, defaultArg) {\n                return createNode(\"optional\", { ...braceSpec, defaultArg });\n            };\n    var peg$f7 = function(braceSpec) { return createNode(\"optional\", braceSpec); };\n    var peg$f8 = function() { return createNode(\"optionalStar\"); };\n    var peg$f9 = function(g) { return createNode(\"optional\", { defaultArg: g }); };\n    var peg$f10 = function() { return createNode(\"optional\"); };\n    var peg$f11 = function(args) {\n                return createNode(\"embellishment\", {\n                    embellishmentTokens: args.content,\n                });\n            };\n    var peg$f12 = function(args, g) {\n                return createNode(\"embellishment\", {\n                    embellishmentTokens: args.content,\n                    defaultArg: g,\n                });\n            };\n    var peg$f13 = function(tok) { return createNode(\"optionalToken\", { token: tok }); };\n    var peg$f14 = function(braceSpec, defaultArg) {\n                return createNode(\"mandatory\", { ...braceSpec, defaultArg });\n            };\n    var peg$f15 = function(braceSpec) { return createNode(\"mandatory\", braceSpec); };\n    var peg$f16 = function() { return createNode(\"mandatory\"); };\n    var peg$f17 = function(openBrace, closeBrace) {\n                return { openBrace, closeBrace };\n            };\n    var peg$f18 = function(content) {\n                return { type: \"group\", content: content };\n            };\n    var peg$f19 = function() { return \"\"; };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parseargs_spec_list() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parsewhitespace();\n      s4 = peg$parsearg_spec();\n      if (s4 !== peg$FAILED) {\n        peg$savedPos = s2;\n        s2 = peg$f0(s4);\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parsewhitespace();\n        s4 = peg$parsearg_spec();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s2 = peg$f0(s4);\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n      s2 = peg$parsewhitespace();\n      peg$savedPos = s0;\n      s0 = peg$f1(s1);\n\n      return s0;\n    }\n\n    function peg$parsearg_spec() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s1 = peg$c0;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      s2 = peg$parseoptional();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsemandatory();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseverbatim();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parserequired();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsebody();\n            }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f2(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseverbatim() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 118) {\n        s1 = peg$c1;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebody() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 98) {\n        s1 = peg$c2;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f4();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseoptional() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s1 = peg$c3;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e4); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      s2 = peg$parseoptional_star();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseoptional_standard();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseoptional_delimited();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseoptional_embellishment();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseoptional_token();\n            }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f5(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptional_delimited() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 68) {\n        s1 = peg$c4;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebrace_spec();\n        s3 = peg$parsebraced_group();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 100) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e6); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebrace_spec();\n          peg$savedPos = s0;\n          s0 = peg$f7(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptional_star() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 115) {\n        s1 = peg$c6;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f8();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseoptional_standard() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 79) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebraced_group();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f9(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 111) {\n          s1 = peg$c8;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e9); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f10();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptional_embellishment() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 101) {\n        s1 = peg$c9;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e10); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebraced_group();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 69) {\n          s1 = peg$c10;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebraced_group();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsebraced_group();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f12(s2, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptional_token() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 116) {\n        s1 = peg$c11;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e12); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f13(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parserequired() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 82) {\n        s1 = peg$c12;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e13); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsebrace_spec();\n        s3 = peg$parsebraced_group();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f14(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 114) {\n          s1 = peg$c13;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e14); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebrace_spec();\n          peg$savedPos = s0;\n          s0 = peg$f15(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemandatory() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 109) {\n        s1 = peg$c14;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e15); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f16();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsebrace_spec() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      peg$silentFails++;\n      s4 = peg$parsewhitespace_token();\n      peg$silentFails--;\n      if (s4 === peg$FAILED) {\n        s3 = undefined;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s1 = input.substring(s1, peg$currPos);\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsewhitespace_token();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = undefined;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s2 = input.substring(s2, peg$currPos);\n      peg$savedPos = s0;\n      s0 = peg$f17(s1, s2);\n\n      return s0;\n    }\n\n    function peg$parsebraced_group() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c15;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e16); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s6 = peg$c16;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e17); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = undefined;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parsebraced_group();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = undefined;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e2); }\n            }\n            if (s7 !== peg$FAILED) {\n              s5 = [s5, s6, s7];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsebraced_group();\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s6 = peg$c16;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e17); }\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = undefined;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parsebraced_group();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e2); }\n              }\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = input.substring(s3, peg$currPos);\n          } else {\n            s3 = s4;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsebraced_group();\n          }\n        }\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s3 = peg$c16;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e17); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f18(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace_token();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace_token();\n      }\n      peg$savedPos = s0;\n      s1 = peg$f19();\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsewhitespace_token() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s0 = peg$c17;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c18;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e19); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 13) {\n            s0 = peg$c19;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e20); }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n\n        const DEFAULT_OPTIONS = {\n            optional: { openBrace: \"[\", closeBrace: \"]\" },\n            mandatory: { openBrace: \"{\", closeBrace: \"}\" },\n        };\n        function createNode(type, options) {\n            const computedOptions = DEFAULT_OPTIONS[type] || {};\n            return { type, ...computedOptions, ...options };\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$anyExpectation();\n\n    var peg$f0 = function() { return []; };\n    var peg$f1 = function(x) { return x; };\n    var peg$f2 = function(rowItems, trailingComment) {\n                return {\n                    itemParts: [],\n                    ...rowItems,\n                    trailingComment,\n                    trailingComma: true,\n                };\n            };\n    var peg$f3 = function(rowItems, trailingComment) {\n                return { ...rowItems, trailingComment };\n            };\n    var peg$f4 = function(a, b) { return processItem(a, b); };\n    var peg$f5 = function(b) { return processItem(null, b); };\n    var peg$f6 = function(cell) { return { cell }; };\n    var peg$f7 = function() { return {}; };\n    var peg$f8 = function(part) { return part; };\n    var peg$f9 = function(space, x) {\n                return {\n                    trailingComment: x,\n                    leadingParbreak: space.parbreak > 0,\n                };\n            };\n    var peg$f10 = function(list) {\n                return {\n                    whitespace: list.filter((x) => options.isWhitespace(x)).length,\n                    parbreak: list.filter((x) => options.isParbreak(x)).length,\n                };\n            };\n    var peg$f11 = function(tok) { return options.isSameLineComment(tok); };\n    var peg$f12 = function(tok) { return tok; };\n    var peg$f13 = function(tok) { return options.isOwnLineComment(tok); };\n    var peg$f14 = function(tok) { return options.isWhitespace(tok); };\n    var peg$f15 = function(tok) { return options.isParbreak(tok); };\n    var peg$f16 = function(tok) { return options.isComma(tok); };\n    var peg$f17 = function(tok) { return options.isEquals(tok); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1, s2;\n\n      s0 = [];\n      s1 = peg$parsecomment_only_line();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseitem_with_end();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseitem_without_end();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsecomment_only_line();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseitem_with_end();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseitem_without_end();\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n        }\n        s2 = peg$parseEOL();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f0();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsetoken();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsetoken();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseitem_sep();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f1(s1);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem_with_end() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parsewhitespace_or_parbreaks();\n      s2 = peg$parserow_items();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parsewhitespace_or_parbreaks();\n      s4 = peg$parseitem_sep();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$parsewhitespace();\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$parsewhitespace();\n        }\n        s6 = peg$parsetrailing_comment();\n        if (s6 === peg$FAILED) {\n          s6 = null;\n        }\n        s7 = [];\n        s8 = peg$parsewhitespace();\n        while (s8 !== peg$FAILED) {\n          s7.push(s8);\n          s8 = peg$parsewhitespace();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f2(s2, s6);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem_without_end() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsewhitespace_or_parbreaks();\n      s2 = peg$parserow_items();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetrailing_comment();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f3(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parserow_items() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseitem_part();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseseparated_part();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseseparated_part();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f4(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseseparated_part();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseseparated_part();\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f5(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseseparated_part() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseparbreak();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseparbreak();\n      }\n      s2 = peg$parseequals();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseparbreak();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parseparbreak();\n        }\n        s4 = peg$parseitem_part();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6(s4);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseparbreak();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseparbreak();\n        }\n        s2 = peg$parseequals();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f7();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem_part() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n      }\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$parsenon_whitespace_non_parbreak_token();\n      if (s4 === peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsewhitespace();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseparbreak();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$currPos;\n          s8 = [];\n          s9 = peg$parsewhitespace();\n          if (s9 === peg$FAILED) {\n            s9 = peg$parseparbreak();\n          }\n          while (s9 !== peg$FAILED) {\n            s8.push(s9);\n            s9 = peg$parsewhitespace();\n            if (s9 === peg$FAILED) {\n              s9 = peg$parseparbreak();\n            }\n          }\n          s9 = peg$parsenon_whitespace_non_parbreak_token();\n          if (s9 !== peg$FAILED) {\n            s8 = [s8, s9];\n            s7 = s8;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          peg$silentFails--;\n          if (s7 !== peg$FAILED) {\n            peg$currPos = s6;\n            s6 = undefined;\n          } else {\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenon_whitespace_non_parbreak_token();\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhitespace();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseparbreak();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$currPos;\n              s8 = [];\n              s9 = peg$parsewhitespace();\n              if (s9 === peg$FAILED) {\n                s9 = peg$parseparbreak();\n              }\n              while (s9 !== peg$FAILED) {\n                s8.push(s9);\n                s9 = peg$parsewhitespace();\n                if (s9 === peg$FAILED) {\n                  s9 = peg$parseparbreak();\n                }\n              }\n              s9 = peg$parsenon_whitespace_non_parbreak_token();\n              if (s9 !== peg$FAILED) {\n                s8 = [s8, s9];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s7 !== peg$FAILED) {\n                peg$currPos = s6;\n                s6 = undefined;\n              } else {\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewhitespace();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewhitespace();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f8(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetrailing_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n      }\n      s2 = peg$parsesame_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f1(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment_only_line() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsewhitespace_or_parbreaks();\n      s2 = peg$parseown_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f9(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetoken() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parsenon_token();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenon_whitespace_non_parbreak_token() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parsewhitespace();\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseparbreak();\n      }\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetoken();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenon_token() {\n      var s0;\n\n      s0 = peg$parseitem_sep();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseequals();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsetrailing_comment();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseown_line_comment();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace_or_parbreaks() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseparbreak();\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseparbreak();\n        }\n      }\n      peg$savedPos = s0;\n      s1 = peg$f10(s1);\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsesame_line_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f11(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseown_line_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f13(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f14(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseparbreak() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f15(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem_sep() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f16(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequals() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f17(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f12(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        function processItem(leadCell, otherCells) {\n            const cells = [leadCell || []];\n            for (const x of otherCells) {\n                cells.push(x.cell || []);\n            }\n            return { itemParts: cells };\n        }\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isWhitespace) {\n            try {\n                Object.assign(\n                    options,\n                    createMatchers([\"\\\\\", \"hline\", \"cr\"], [\"&\"])\n                );\n                Object.assign(options, {\n                    isComma(node) {\n                        return node.type === \"string\" && node.content === \",\";\n                    },\n                    isEquals(node) {\n                        return node.type === \"string\" && node.content === \"=\";\n                    },\n                    isParbreak(node) {\n                        return node.type === \"parbreak\";\n                    },\n                });\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$anyExpectation();\n\n    var peg$f0 = function(e) {\n                // We may have inserted nested arrays.\n                // Flatten everything before we're done and remove any\n                // resitual `null`s\n                return [].concat(...e).filter((n) => !!n);\n            };\n    var peg$f1 = function() { return []; };\n    var peg$f2 = function(tok) { return options.isHash(tok); };\n    var peg$f3 = function(tok) { return tok; };\n    var peg$f4 = function(tok) { return options.isNumber(tok); };\n    var peg$f5 = function() { return { type: \"string\", content: \"#\" }; };\n    var peg$f6 = function(num) {\n                const split = options.splitNumber(num);\n                return [{ type: \"hash_number\", number: split.number }, split.rest];\n            };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsedouble_hash();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsehash_number();\n        if (s2 === peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e0); }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsedouble_hash();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsehash_number();\n            if (s2 === peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e0); }\n              }\n            }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f0(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseEOL();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f1();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsehash() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f2(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f4(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_hash() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsehash();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsehash();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f5();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsehash_number() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsehash();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isHash) {\n            try {\n                Object.assign(options, {\n                    isHash: (node) =>\n                        node.type === \"string\" && node.content === \"#\",\n                    isNumber: (node) =>\n                        node.type === \"string\" && 0 < +node.content.charAt(0),\n                    splitNumber: (node) => {\n                        const number = +node.content.charAt(0);\n                        if (node.content.length > 1) {\n                            return {\n                                number,\n                                rest: {\n                                    type: \"string\",\n                                    content: node.content.slice(1),\n                                },\n                            };\n                        }\n                        return { number };\n                    },\n                });\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$anyExpectation();\n\n    var peg$f0 = function(e) {\n                // We may have inserted nested arrays.\n                // Flatten everything before we're done and remove any\n                // resitual `null`s\n                return [].concat(...e).filter((n) => !!n);\n            };\n    var peg$f1 = function() { return []; };\n    var peg$f2 = function(toks) { return options.isRecognized(toks); };\n    var peg$f3 = function(toks) {\n                return options.isRecognized(toks);\n            };\n    var peg$f4 = function(tok1, tok2) {\n                    const split = options.split(tok2);\n                    return options.isRecognized([tok1, split[0]]);\n                };\n    var peg$f5 = function(tok1, tok2) {\n                const split = options.split(tok2);\n                return [options.isRecognized([tok1, split[0]]), split[1]];\n            };\n    var peg$f6 = function(tok1, tok2) { return options.isRecognized([tok1, tok2]); };\n    var peg$f7 = function(tok1, tok2) {\n                return options.isRecognized([tok1, tok2]);\n            };\n    var peg$f8 = function(tok) { return options.isRecognized([tok]); };\n    var peg$f9 = function(tok) {\n                return options.isRecognized([tok]);\n            };\n    var peg$f10 = function(tok) { return options.isMacro(tok); };\n    var peg$f11 = function(tok) { return tok; };\n    var peg$f12 = function(tok) { return options.isWhitespace(tok); };\n    var peg$f13 = function(tok) { return options.isSplitable(tok); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsetriple_ligature();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsedouble_ligature();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsemono_ligature();\n          if (s2 === peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e0); }\n            }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsetriple_ligature();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsedouble_ligature();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsemono_ligature();\n              if (s2 === peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s2 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e0); }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f0(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseEOL();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f1();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetriple_ligature() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e0); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f2(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_ligature() {\n      var s0;\n\n      s0 = peg$parsedouble_macro_ligature();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedouble_macro_ligature_extracted();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedouble_char_ligature();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_macro_ligature_extracted() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemacro();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewhitespace();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n        s3 = peg$parsesplitable();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s4 = peg$f4(s1, s3);\n          if (s4) {\n            s4 = undefined;\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_macro_ligature() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemacro();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewhitespace();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s4 = peg$f6(s1, s3);\n          if (s4) {\n            s4 = undefined;\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_char_ligature() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f2(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemono_ligature() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f8(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f9(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemacro() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f10(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f12(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesplitable() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f13(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isWhitespace) {\n            try {\n                Object.assign(options, {\n                    isMacro: (node) => node.type === \"macro\",\n                    isWhitespace: (node) => node.type === \"whitespace\",\n                    isRecognized: (nodes) => {\n                        if (\n                            nodes.length == 2 &&\n                            nodes[0].content === \"^\" &&\n                            nodes[1].content === \"o\"\n                        ) {\n                            return { type: \"string\", content: \"\u00F4\" };\n                        }\n\n                        return null;\n                    },\n                    isSplitable: (node) =>\n                        node.type === \"string\" && node.content.length > 1,\n                    split: (node) => [\n                        { type: \"string\", content: node.content.charAt(0) },\n                        { type: \"string\", content: node.content.slice(1) },\n                    ],\n                });\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n\n    var peg$c0 = \";\";\n    var peg$c1 = \",\";\n    var peg$c2 = \":\";\n    var peg$c3 = \"/\";\n    var peg$c4 = \">\";\n    var peg$c5 = \"!\";\n    var peg$c6 = \".\";\n    var peg$c7 = \"!![\";\n    var peg$c8 = \"]\";\n    var peg$c9 = \"!!\";\n    var peg$c10 = \"+\";\n    var peg$c11 = \"-\";\n\n    var peg$r0 = /^[a-zA-Z0-9]/;\n    var peg$r1 = /^[0-9]/;\n    var peg$r2 = /^[ \\t\\n\\r]/;\n    var peg$r3 = /^[0-9a-fA-F]/;\n\n    var peg$e0 = peg$anyExpectation();\n    var peg$e1 = peg$literalExpectation(\";\", false);\n    var peg$e2 = peg$literalExpectation(\",\", false);\n    var peg$e3 = peg$otherExpectation(\"model list\");\n    var peg$e4 = peg$literalExpectation(\":\", false);\n    var peg$e5 = peg$literalExpectation(\"/\", false);\n    var peg$e6 = peg$otherExpectation(\"model\");\n    var peg$e7 = peg$otherExpectation(\"color spec list\");\n    var peg$e8 = peg$otherExpectation(\"color spec\");\n    var peg$e9 = peg$otherExpectation(\"color\");\n    var peg$e10 = peg$otherExpectation(\"function expression\");\n    var peg$e11 = peg$literalExpectation(\">\", false);\n    var peg$e12 = peg$otherExpectation(\"function\");\n    var peg$e13 = peg$otherExpectation(\"extended expression\");\n    var peg$e14 = peg$otherExpectation(\"core model\");\n    var peg$e15 = peg$otherExpectation(\"expr\");\n    var peg$e16 = peg$literalExpectation(\"!\", false);\n    var peg$e17 = peg$otherExpectation(\"mix expr\");\n    var peg$e18 = peg$otherExpectation(\"name\");\n    var peg$e19 = peg$literalExpectation(\".\", false);\n    var peg$e20 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false);\n    var peg$e21 = peg$otherExpectation(\"postfix\");\n    var peg$e22 = peg$literalExpectation(\"!![\", false);\n    var peg$e23 = peg$literalExpectation(\"]\", false);\n    var peg$e24 = peg$literalExpectation(\"!!\", false);\n    var peg$e25 = peg$otherExpectation(\"prefix\");\n    var peg$e26 = peg$otherExpectation(\"plus\");\n    var peg$e27 = peg$literalExpectation(\"+\", false);\n    var peg$e28 = peg$otherExpectation(\"minus\");\n    var peg$e29 = peg$literalExpectation(\"-\", false);\n    var peg$e30 = peg$otherExpectation(\"num\");\n    var peg$e31 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$e32 = peg$otherExpectation(\"positive float\");\n    var peg$e33 = peg$otherExpectation(\"divisor\");\n    var peg$e34 = peg$otherExpectation(\"int\");\n    var peg$e35 = peg$otherExpectation(\"whitespace\");\n    var peg$e36 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n    var peg$e37 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false);\n\n    var peg$f0 = function(m) { return m; };\n    var peg$f1 = function(a) { return { type: \"invalid_spec\", content: a }; };\n    var peg$f2 = function(f, c) { return c; };\n    var peg$f3 = function(f, r) {\n                return { type: \"color_set\", content: [f].concat(r) };\n            };\n    var peg$f4 = function(n, s) {\n                return { type: \"color_set_item\", name: n, spec_list: s };\n            };\n    var peg$f5 = function(c, m) {\n                return { type: \"model_list\", contents: m, core_model: c };\n            };\n    var peg$f6 = function(m) {\n                return { type: \"model_list\", contents: m, core_model: null };\n            };\n    var peg$f7 = function(m, a) { return a; };\n    var peg$f8 = function(m, r) { return [m].concat(r); };\n    var peg$f9 = function(s, a) { return a; };\n    var peg$f10 = function(s, r) {\n                return { type: \"spec_list\", content: [s].concat(r) };\n            };\n    var peg$f11 = function(c) {\n                return { type: \"hex_spec\", content: [c] };\n            };\n    var peg$f12 = function(c, d) { return d; };\n    var peg$f13 = function(c, r) {\n                return { type: \"num_spec\", content: r ? [c].concat(r) : [c] };\n            };\n    var peg$f14 = function(c, fs) {\n                return { type: \"color\", color: c, functions: fs };\n            };\n    var peg$f15 = function(f, n) { return n; };\n    var peg$f16 = function(f, args) {\n                return { type: \"function\", name: f, args };\n            };\n    var peg$f17 = function(core, d, e, es) {\n                return {\n                    type: \"extended_expr\",\n                    core_model: core,\n                    div: d,\n                    expressions: [e].concat(es),\n                };\n            };\n    var peg$f18 = function(core, e, es) {\n                return {\n                    type: \"extended_expr\",\n                    core_model: core,\n                    div: null,\n                    expressions: [e].concat(es),\n                };\n            };\n    var peg$f19 = function(e, d) {\n                return { type: \"weighted_expr\", color: e, weight: d };\n            };\n    var peg$f20 = function(e) { return e; };\n    var peg$f21 = function(p, n, e, po) {\n                return {\n                    type: \"expr\",\n                    prefix: p,\n                    name: n,\n                    mix_expr: e,\n                    postfix: po,\n                };\n            };\n    var peg$f22 = function(p, n) {\n                return { type: \"complete_mix\", mix_percent: p, name: n };\n            };\n    var peg$f23 = function(p) { return { type: \"partial_mix\", mix_percent: p }; };\n    var peg$f24 = function(c, p) { return c.concat(p || []); };\n    var peg$f25 = function(n) { return { type: \"postfix\", num: n }; };\n    var peg$f26 = function(p) { return { type: \"postfix\", plusses: p }; };\n    var peg$f27 = function(n) { return parseInt(n, 10); };\n    var peg$f28 = function(n) { return parseFloat(n); };\n    var peg$f29 = function(n) { return n; };\n    var peg$f30 = function(n) { return -n; };\n    var peg$f31 = function(m, n) { return m ? -n : n; };\n    var peg$f32 = function(h) { return h.toUpperCase(); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsespec();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseEOL();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f0(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsespec_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEOL();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f0(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecolor();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseEOL();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f0(s1);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsemodel_list();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseEOL();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f0(s1);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsecolor_set_spec();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parseEOL();\n                if (s2 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s0 = peg$f0(s1);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                s2 = [];\n                if (input.length > peg$currPos) {\n                  s3 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e0); }\n                }\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  if (input.length > peg$currPos) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e0); }\n                  }\n                }\n                s1 = input.substring(s1, peg$currPos);\n                peg$savedPos = s0;\n                s1 = peg$f1(s1);\n                s0 = s1;\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolor_set_spec() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecolor_set_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s4 = peg$c0;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e1); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecolor_set_item();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f2(s1, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 59) {\n            s4 = peg$c0;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e1); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolor_set_item();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f2(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f3(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolor_set_item() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsename();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c1;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsespec_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemodel_list() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsecore_model();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c2;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e4); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemodel_list_tail();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsemodel_list_tail();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f6(s1);\n        }\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemodel_list_tail() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemodel();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s4 = peg$c3;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e5); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemodel();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f7(s1, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s4 = peg$c3;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e5); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsemodel();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f7(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f8(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemodel() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parsecore_model();\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsespec_list() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsespec();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s4 = peg$c3;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e5); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsespec();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s3 = peg$f9(s1, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s4 = peg$c3;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e5); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsespec();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f9(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f10(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsespec() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      s3 = peg$parsehex();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsehex();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsehex();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsehex();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsehex();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsehex();\n                if (s8 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6, s7, s8];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f11(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedec();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c1;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e2); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedec();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f12(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s4 = peg$c1;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e2); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsedec();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s3 = peg$f12(s1, s5);\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            }\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            s4 = peg$parsesp();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsedec();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f12(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                s4 = peg$parsesp();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsedec();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s3 = peg$f12(s1, s5);\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              }\n            } else {\n              s2 = peg$FAILED;\n            }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f13(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolor() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsecolor_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsefunc_expr();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsefunc_expr();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f14(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolor_expr() {\n      var s0;\n\n      s0 = peg$parseext_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsename();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefunc_expr() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s1 = peg$c4;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefunction();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c1;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e2); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseint();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s4 = peg$f15(s2, s6);\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c1;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e2); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseint();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s4 = peg$f15(s2, s6);\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          peg$savedPos = s0;\n          s0 = peg$f16(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e10); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefunction() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parsename();\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseext_expr() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsecore_model();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c1;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsediv();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s4 = peg$c2;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e4); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseweighted_expr();\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$parseadditional_weighted_expr();\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parseadditional_weighted_expr();\n                }\n                peg$savedPos = s0;\n                s0 = peg$f17(s1, s3, s5, s6);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecore_model();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s2 = peg$c2;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e4); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseweighted_expr();\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = peg$parseadditional_weighted_expr();\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parseadditional_weighted_expr();\n              }\n              peg$savedPos = s0;\n              s0 = peg$f18(s1, s3, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e13); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseweighted_expr() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseexpr();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c1;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsedec();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f19(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseadditional_weighted_expr() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 59) {\n        s1 = peg$c0;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseweighted_expr();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f20(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecore_model() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parsename();\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseexpr() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseprefix();\n      s2 = peg$parsename();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsemix_expr();\n        s4 = peg$parsepostfix();\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f21(s1, s2, s3, s4);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e15); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomplete_mix() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e16); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepct();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s3 = peg$c5;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsename();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f22(s2, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepartial_mix() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e16); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepct();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f23(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemix_expr() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsecomplete_mix();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsecomplete_mix();\n      }\n      s2 = peg$parsepartial_mix();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f24(s1, s2);\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e17); }\n\n      return s0;\n    }\n\n    function peg$parsename() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s0 = peg$c6;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e19); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$r0.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e20); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepostfix() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c7) {\n        s1 = peg$c7;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenum();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c8;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e23); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c9) {\n          s1 = peg$c9;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e24); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          s4 = peg$parseplus();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseplus();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = input.substring(s2, peg$currPos);\n          } else {\n            s2 = s3;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f26(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e21); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseprefix() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parseminus();\n      if (s0 === peg$FAILED) {\n        s0 = null;\n      }\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e25); }\n\n      return s0;\n    }\n\n    function peg$parseplus() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s2 = peg$c10;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e27); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s2 = peg$c10;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e27); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e26); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseminus() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s2 = peg$c11;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e29); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s2 = peg$c11;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e29); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e28); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenum() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e31); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$r1.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e31); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f27(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e30); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepct() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      s4 = [];\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s5 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e31); }\n      }\n      if (s5 !== peg$FAILED) {\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          if (peg$r1.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e31); }\n          }\n        }\n      } else {\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s3 = input.substring(s3, peg$currPos);\n      } else {\n        s3 = s4;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s6 = peg$c6;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e19); }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          s8 = [];\n          if (peg$r1.test(input.charAt(peg$currPos))) {\n            s9 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s9 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e31); }\n          }\n          while (s9 !== peg$FAILED) {\n            s8.push(s9);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e31); }\n            }\n          }\n          s7 = input.substring(s7, peg$currPos);\n          s6 = [s6, s7];\n          s5 = s6;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        s4 = input.substring(s4, peg$currPos);\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s3 = peg$c6;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e19); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = [];\n          if (peg$r1.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e31); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$r1.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e31); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = input.substring(s4, peg$currPos);\n          } else {\n            s4 = s5;\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f28(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e32); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsediv() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$parsepct();\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e33); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedec() {\n      var s0, s1, s2;\n\n      s0 = peg$parsepct();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c10;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e27); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepct();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c11;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e29); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsepct();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f30(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseint() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseminus();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      s2 = peg$parsenum();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f31(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e34); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$r2.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e36); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e36); }\n        }\n      }\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e35); }\n\n      return s0;\n    }\n\n    function peg$parsesp() {\n      var s0, s1;\n\n      s0 = [];\n      if (peg$r2.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e36); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$r2.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e36); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsehex() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (peg$r3.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e37); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f32(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$otherExpectation(\"decl_start\");\n    var peg$e1 = peg$otherExpectation(\"decl_end\");\n    var peg$e2 = peg$otherExpectation(\"vert\");\n    var peg$e3 = peg$anyExpectation();\n    var peg$e4 = peg$otherExpectation(\"l\");\n    var peg$e5 = peg$otherExpectation(\"r\");\n    var peg$e6 = peg$otherExpectation(\"c\");\n    var peg$e7 = peg$otherExpectation(\"p\");\n    var peg$e8 = peg$otherExpectation(\"m\");\n    var peg$e9 = peg$otherExpectation(\"b\");\n    var peg$e10 = peg$otherExpectation(\"w\");\n    var peg$e11 = peg$otherExpectation(\"W\");\n    var peg$e12 = peg$otherExpectation(\"X\");\n    var peg$e13 = peg$otherExpectation(\"!\");\n    var peg$e14 = peg$otherExpectation(\"@\");\n    var peg$e15 = peg$otherExpectation(\"<\");\n    var peg$e16 = peg$otherExpectation(\">\");\n    var peg$e17 = peg$otherExpectation(\"group\");\n    var peg$e18 = peg$otherExpectation(\"whitespace\");\n\n    var peg$f0 = function(c) { return c; };\n    var peg$f1 = function(cols) { return cols; };\n    var peg$f2 = function() { return []; };\n    var peg$f3 = function(divs1, start, a, end, divs2) {\n                return {\n                    type: \"column\",\n                    pre_dividers: divs1,\n                    post_dividers: divs2,\n                    before_start_code: start,\n                    before_end_code: end,\n                    alignment: a,\n                };\n            };\n    var peg$f4 = function() {\n                        return {\n                            type: \"vert_divider\",\n                        };\n                    };\n    var peg$f5 = function(b, g) {\n                        return {\n                            type: \"bang_divider\",\n                            content: g[0].content,\n                        };\n                    };\n    var peg$f6 = function(g) {\n                        return {\n                            type: \"at_divider\",\n                            content: g[0].content,\n                        };\n                    };\n    var peg$f7 = function(div) { return div; };\n    var peg$f8 = function(g) { return { type: \"decl_code\", code: g[0].content }; };\n    var peg$f9 = function() { return { type: \"alignment\", alignment: \"left\" }; };\n    var peg$f10 = function() { return { type: \"alignment\", alignment: \"center\" }; };\n    var peg$f11 = function() { return { type: \"alignment\", alignment: \"right\" }; };\n    var peg$f12 = function() { return { type: \"alignment\", alignment: \"X\" }; };\n    var peg$f13 = function() { return \"top\"; };\n    var peg$f14 = function() { return \"default\"; };\n    var peg$f15 = function() { return \"bottom\"; };\n    var peg$f16 = function(a, g) {\n                return {\n                    type: \"alignment\",\n                    alignment: \"parbox\",\n                    baseline: a,\n                    size: g[0].content,\n                };\n            };\n    var peg$f17 = function(g1, g2) {\n                return {\n                    type: \"alignment\",\n                    alignment: \"parbox\",\n                    baseline: g1[0].content,\n                    size: g2[0].content,\n                };\n            };\n    var peg$f18 = function(tok) { return options.matchChar(tok, \"|\"); };\n    var peg$f19 = function(tok) { return options.matchChar(tok, \"l\"); };\n    var peg$f20 = function(tok) { return options.matchChar(tok, \"r\"); };\n    var peg$f21 = function(tok) { return options.matchChar(tok, \"c\"); };\n    var peg$f22 = function(tok) { return options.matchChar(tok, \"p\"); };\n    var peg$f23 = function(tok) { return options.matchChar(tok, \"m\"); };\n    var peg$f24 = function(tok) { return options.matchChar(tok, \"b\"); };\n    var peg$f25 = function(tok) { return options.matchChar(tok, \"w\"); };\n    var peg$f26 = function(tok) { return options.matchChar(tok, \"W\"); };\n    var peg$f27 = function(tok) { return options.matchChar(tok, \"X\"); };\n    var peg$f28 = function(tok) { return options.matchChar(tok, \"!\"); };\n    var peg$f29 = function(tok) { return options.matchChar(tok, \"@\"); };\n    var peg$f30 = function(tok) { return options.matchChar(tok, \"<\"); };\n    var peg$f31 = function(tok) { return options.matchChar(tok, \">\"); };\n    var peg$f32 = function(tok) { return options.isGroup(tok); };\n    var peg$f33 = function(tok) { return options.isWhitespace(tok); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parsecolumn();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parse_();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parse_();\n        }\n        peg$savedPos = s2;\n        s2 = peg$f0(s3);\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parse_();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parse_();\n            }\n            peg$savedPos = s2;\n            s2 = peg$f0(s3);\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseEOL();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f2();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolumn() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsecolumn_divider();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsecolumn_divider();\n      }\n      s2 = peg$parsedecl_start();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parsealignment();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedecl_end();\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        s5 = [];\n        s6 = peg$parsecolumn_divider();\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$parsecolumn_divider();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f3(s1, s2, s3, s4, s5);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecolumn_divider() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parse_();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parse_();\n      }\n      s2 = peg$currPos;\n      s3 = peg$parsevert();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s2;\n        s3 = peg$f4();\n      }\n      s2 = s3;\n      if (s2 === peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsebang();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsegroup();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s2 = peg$f5(s3, s4);\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseat();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsegroup();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s2;\n              s2 = peg$f6(s4);\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f7(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedecl_start() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsegreater();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsegroup();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedecl_end() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseless();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsegroup();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsealignment() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsel();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f9();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsec();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f10();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parser();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f11();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseX();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$f12();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$currPos;\n              s2 = peg$parsep();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$f13();\n              }\n              s1 = s2;\n              if (s1 === peg$FAILED) {\n                s1 = peg$currPos;\n                s2 = peg$parsem();\n                if (s2 !== peg$FAILED) {\n                  peg$savedPos = s1;\n                  s2 = peg$f14();\n                }\n                s1 = s2;\n                if (s1 === peg$FAILED) {\n                  s1 = peg$currPos;\n                  s2 = peg$parseb();\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s1;\n                    s2 = peg$f15();\n                  }\n                  s1 = s2;\n                }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parse_();\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  s3 = peg$parse_();\n                }\n                s3 = peg$parsegroup();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s0 = peg$f16(s1, s3);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsew();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseW();\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$parse_();\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parse_();\n                  }\n                  s3 = peg$parsegroup();\n                  if (s3 !== peg$FAILED) {\n                    s4 = [];\n                    s5 = peg$parse_();\n                    while (s5 !== peg$FAILED) {\n                      s4.push(s5);\n                      s5 = peg$parse_();\n                    }\n                    s5 = peg$parsegroup();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f17(s3, s5);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsevert() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f18(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsel() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f19(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e4); }\n      }\n\n      return s0;\n    }\n\n    function peg$parser() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f20(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsec() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f21(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsep() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f22(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsem() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f23(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseb() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f24(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsew() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f25(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e10); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseW() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f26(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseX() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f27(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsebang() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f28(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e13); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseat() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f29(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseless() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f30(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e15); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegreater() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f31(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e16); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f32(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e17); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f33(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isHash) {\n            try {\n                Object.assign(options, {\n                    matchChar: (node, char) =>\n                        node.type === \"string\" && node.content === char,\n                    isGroup: (node) => node.type === \"group\",\n                    isWhitespace: (node) => node.type === \"whitespace\",\n                });\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { body: peg$parsebody };\n    var peg$startRuleFunction = peg$parsebody;\n\n\n\n    var peg$e0 = peg$otherExpectation(\"partial item\");\n    var peg$e1 = peg$otherExpectation(\"item\");\n    var peg$e2 = peg$anyExpectation();\n    var peg$e3 = peg$otherExpectation(\"equation\");\n    var peg$e4 = peg$otherExpectation(\"trailing comment\");\n    var peg$e5 = peg$otherExpectation(\"comment only line\");\n    var peg$e6 = peg$otherExpectation(\"non-var token\");\n    var peg$e7 = peg$otherExpectation(\"token\");\n    var peg$e8 = peg$otherExpectation(\"same line comment\");\n    var peg$e9 = peg$otherExpectation(\"own line comment\");\n    var peg$e10 = peg$otherExpectation(\",\");\n    var peg$e11 = peg$otherExpectation(\"@\");\n    var peg$e12 = peg$otherExpectation(\"variable token\");\n    var peg$e13 = peg$otherExpectation(\"+/-\");\n    var peg$e14 = peg$otherExpectation(\"=\");\n\n    var peg$f0 = function(a, b) { return a.concat(b ? b : []); };\n    var peg$f1 = function() { return []; };\n    var peg$f2 = function(a, b, c) { return a.concat(b, c); };\n    var peg$f3 = function(op, a, b, c) {\n                return { type: \"item\", op, variable: b, content: a.concat(b, c) };\n            };\n    var peg$f4 = function(op, a) {\n                return { type: \"item\", op, variable: null, content: a };\n            };\n    var peg$f5 = function(line, sep, comment) {\n                return { ...line, sep: [].concat(sep), trailingComment: comment };\n            };\n    var peg$f6 = function(line, comment) {\n                return { ...line, trailingComment: comment };\n            };\n    var peg$f7 = function(eq, ann) {\n                return {\n                    type: \"line\",\n                    equation: eq,\n                    annotation: ann,\n                    sep: null,\n                };\n            };\n    var peg$f8 = function(at, ann) {\n                return at ? { type: \"annotation\", marker: at, content: ann } : null;\n            };\n    var peg$f9 = function(left, eq, right) {\n                return { type: \"equation\", left, right, equals: eq };\n            };\n    var peg$f10 = function(x) { return x; };\n    var peg$f11 = function(x) {\n                return {\n                    type: \"line\",\n                    trailingComment: x,\n                };\n            };\n    var peg$f12 = function(v, s) { return [v].concat(s ? s : []); };\n    var peg$f13 = function(t) { return t; };\n    var peg$f14 = function(tok) { return options.isSameLineComment(tok); };\n    var peg$f15 = function(tok) { return tok; };\n    var peg$f16 = function(tok) { return options.isOwnLineComment(tok); };\n    var peg$f17 = function(tok) { return options.isWhitespace(tok); };\n    var peg$f18 = function(tok) { return options.isSep(tok); };\n    var peg$f19 = function(tok) { return options.isAt(tok); };\n    var peg$f20 = function(tok) { return options.isVar(tok); };\n    var peg$f21 = function(tok) { return options.isOperation(tok); };\n    var peg$f22 = function(tok) { return options.isEquals(tok); };\n    var peg$f23 = function(tok) { return options.isSubscript(tok); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsebody() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsecomment_only_line();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseline_with_sep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsepartial_line_with_comment();\n        }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsecomment_only_line();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseline_with_sep();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsepartial_line_with_comment();\n          }\n        }\n      }\n      s2 = peg$parseline_without_sep();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseEOL();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f0(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseEOL();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f1();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepartial_item() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parse_();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parse_();\n      }\n      s2 = [];\n      s3 = peg$parsenon_var_token();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsenon_var_token();\n      }\n      s3 = [];\n      s4 = peg$parse_();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parse_();\n      }\n      s4 = peg$parsevar();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$parse_();\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$parse_();\n        }\n        s6 = [];\n        s7 = peg$parsetoken();\n        while (s7 !== peg$FAILED) {\n          s6.push(s7);\n          s7 = peg$parsetoken();\n        }\n        s7 = [];\n        s8 = peg$parse_();\n        while (s8 !== peg$FAILED) {\n          s7.push(s8);\n          s8 = peg$parse_();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f2(s2, s4, s6);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseitem() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseoperation();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      s3 = [];\n      s4 = peg$parsenon_var_token();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsenon_var_token();\n      }\n      s4 = [];\n      s5 = peg$parse_();\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = peg$parse_();\n      }\n      s5 = peg$parsevar();\n      if (s5 !== peg$FAILED) {\n        s6 = [];\n        s7 = peg$parse_();\n        while (s7 !== peg$FAILED) {\n          s6.push(s7);\n          s7 = peg$parse_();\n        }\n        s7 = [];\n        s8 = peg$parsetoken();\n        while (s8 !== peg$FAILED) {\n          s7.push(s8);\n          s8 = peg$parsetoken();\n        }\n        s8 = [];\n        s9 = peg$parse_();\n        while (s9 !== peg$FAILED) {\n          s8.push(s9);\n          s9 = peg$parse_();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f3(s1, s3, s5, s7);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseoperation();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = [];\n        s3 = peg$parse_();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n        s3 = [];\n        s4 = peg$parsenon_var_token();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsenon_var_token();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f4(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseline_with_sep() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseline_without_sep();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsesep();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetrailing_comment();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f5(s1, s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepartial_line_with_comment() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseline_without_sep();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetrailing_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseline_without_sep() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      peg$silentFails--;\n      if (s2 !== peg$FAILED) {\n        peg$currPos = s1;\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseequation();\n        s3 = peg$parseannotation();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f7(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseannotation() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseat();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsenon_sep_token();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsenon_sep_token();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f8(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequation() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseitem();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseitem();\n      }\n      s2 = peg$parseequals();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = [];\n      s4 = peg$parsetoken();\n      if (s4 === peg$FAILED) {\n        s4 = peg$parseoperation();\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsetoken();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseoperation();\n        }\n      }\n      peg$savedPos = s0;\n      s0 = peg$f9(s1, s2, s3);\n      peg$silentFails--;\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e3); }\n\n      return s0;\n    }\n\n    function peg$parsetrailing_comment() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parse_();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parse_();\n      }\n      s2 = peg$parsesame_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f10(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e4); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment_only_line() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parse_();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parse_();\n      }\n      s2 = peg$parseown_line_comment();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f11(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsevar() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsevar_token();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parse_();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n        s3 = peg$parsesubscript();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f12(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenon_var_token() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsevar();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = undefined;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetoken();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f13(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenon_sep_token() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsesep();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsetrailing_comment();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseown_line_comment();\n        }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = undefined;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f10(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetoken() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsesep();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseat();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseoperation();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseequals();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsetrailing_comment();\n              if (s2 === peg$FAILED) {\n                s2 = peg$parseown_line_comment();\n              }\n            }\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = undefined;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f10(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesame_line_comment() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f14(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseown_line_comment() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f16(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f17(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesep() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f18(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e10); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseat() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f19(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsevar_token() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f20(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseoperation() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parse_();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parse_();\n      }\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        peg$savedPos = peg$currPos;\n        s4 = peg$f21(s2);\n        if (s4) {\n          s4 = undefined;\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e13); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseequals() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f22(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesubscript() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$f23(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f15(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        //\n        // These are compatability functions used when running in the browser\n        //\n        // Check if the `options` object has the functions that we need.\n        // If not, try to add them\n        if (!options.isWhitespace) {\n            try {\n                Object.assign(options, {\n                    isSep: (node) => node.type === \"string\" && node.content === \",\",\n                    isVar: (node) =>\n                        node.type === \"string\" && node.content.match(/[a-zA-Z]/),\n                    isOperation: (node) =>\n                        node.type === \"string\" && node.content.match(/[+-]/),\n                    isEquals: (node) =>\n                        node.type === \"string\" && node.content === \"=\",\n                    isAt: (node) => node.type === \"string\" && node.content === \"@\",\n                    isSubscript: (node) => node.content === \"_\",\n                    isWhitespace: (node) => node.type === \"whitespace\",\n                    isSameLineComment: (node) =>\n                        node.type === \"comment\" && node.sameline,\n                    isOwnLineComment: (node) =>\n                        node.type === \"comment\" && !node.sameline,\n                });\n            } catch (e) {\n                console.warn(\"Error when initializing parser\", e);\n            }\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "export default // Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function C() { this.constructor = child; }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = \"SyntaxError\";\n    return self;\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$padEnd(str, targetLength, padString) {\n    padString = padString || \" \";\n    if (str.length > targetLength) { return str; }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n  }\n\n  peg$SyntaxError.prototype.format = function(sources) {\n    var str = \"Error: \" + this.message;\n    if (this.location) {\n      var src = null;\n      var k;\n      for (k = 0; k < sources.length; k++) {\n        if (sources[k].source === this.location.source) {\n          src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n          break;\n        }\n      }\n      var s = this.location.start;\n      var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n      if (src) {\n        var e = this.location.end;\n        var filler = peg$padEnd(\"\", s.line.toString().length);\n        var line = src[s.line - 1];\n        var last = s.line === e.line ? e.column : line.length + 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n            + peg$padEnd(\"\", last - s.column, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  };\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class: function(expectation) {\n        var escapedParts = expectation.parts.map(function(part) {\n          return Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part);\n        });\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function() {\n        return \"any character\";\n      },\n\n      end: function() {\n        return \"end of input\";\n      },\n\n      other: function(expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = expected.map(describeExpectation);\n      var i, j;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { root: peg$parseroot };\n    var peg$startRuleFunction = peg$parseroot;\n\n    var peg$c0 = \"plus\";\n    var peg$c1 = \"minus\";\n    var peg$c2 = \"pt\";\n    var peg$c3 = \"mm\";\n    var peg$c4 = \"cm\";\n    var peg$c5 = \"in\";\n    var peg$c6 = \"ex\";\n    var peg$c7 = \"em\";\n    var peg$c8 = \"bp\";\n    var peg$c9 = \"pc\";\n    var peg$c10 = \"dd\";\n    var peg$c11 = \"cc\";\n    var peg$c12 = \"nd\";\n    var peg$c13 = \"nc\";\n    var peg$c14 = \"sp\";\n    var peg$c15 = \"filll\";\n    var peg$c16 = \"fill\";\n    var peg$c17 = \"fil\";\n    var peg$c18 = \".\";\n    var peg$c19 = \"+\";\n    var peg$c20 = \"-\";\n\n    var peg$r0 = /^[0-9]/;\n\n    var peg$e0 = peg$anyExpectation();\n    var peg$e1 = peg$literalExpectation(\"plus\", false);\n    var peg$e2 = peg$literalExpectation(\"minus\", false);\n    var peg$e3 = peg$literalExpectation(\"pt\", false);\n    var peg$e4 = peg$literalExpectation(\"mm\", false);\n    var peg$e5 = peg$literalExpectation(\"cm\", false);\n    var peg$e6 = peg$literalExpectation(\"in\", false);\n    var peg$e7 = peg$literalExpectation(\"ex\", false);\n    var peg$e8 = peg$literalExpectation(\"em\", false);\n    var peg$e9 = peg$literalExpectation(\"bp\", false);\n    var peg$e10 = peg$literalExpectation(\"pc\", false);\n    var peg$e11 = peg$literalExpectation(\"dd\", false);\n    var peg$e12 = peg$literalExpectation(\"cc\", false);\n    var peg$e13 = peg$literalExpectation(\"nd\", false);\n    var peg$e14 = peg$literalExpectation(\"nc\", false);\n    var peg$e15 = peg$literalExpectation(\"sp\", false);\n    var peg$e16 = peg$literalExpectation(\"filll\", false);\n    var peg$e17 = peg$literalExpectation(\"fill\", false);\n    var peg$e18 = peg$literalExpectation(\"fil\", false);\n    var peg$e19 = peg$otherExpectation(\"number\");\n    var peg$e20 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$e21 = peg$literalExpectation(\".\", false);\n    var peg$e22 = peg$literalExpectation(\"+\", false);\n    var peg$e23 = peg$literalExpectation(\"-\", false);\n\n    var peg$f0 = function(b, st, sh) {\n                        // Only return the non-null glue items\n                        return {\n                            type: \"glue\",\n                            fixed: b,\n                            stretchable: st,\n                            shrinkable: sh,\n                            position: location(),\n                        };\n                    };\n    var peg$f1 = function(glue) { return glue; };\n    var peg$f2 = function(n, u) { return { type: \"dim\", value: n, unit: u }; };\n    var peg$f3 = function(n, u) {\n                return { type: \"dim\", value: n, unit: u };\n            };\n    var peg$f4 = function(n) { return parseFloat(n); };\n\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$savedPos;\n    }\n\n    function range() {\n      return {\n        source: peg$source,\n        start: peg$savedPos,\n        end: peg$currPos\n      };\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== undefined\n        ? location\n        : peg$computeLocation(peg$savedPos, peg$currPos);\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos];\n      var p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos);\n      var endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        source: peg$source,\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parseroot() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsebase();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestretchable();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        s4 = peg$parseshrinkable();\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        peg$savedPos = s1;\n        s1 = peg$f0(s2, s3, s4);\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e0); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e0); }\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f1(s1);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebase() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseunit();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f2(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsestretchable() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c0) {\n        s1 = peg$c0;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserubber_unit();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseshrinkable() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c1) {\n        s1 = peg$c1;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e2); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserubber_unit();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseunit() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c2) {\n        s0 = peg$c2;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c3) {\n          s0 = peg$c3;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e4); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c4) {\n            s0 = peg$c4;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e5); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c5) {\n              s0 = peg$c5;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e6); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c6) {\n                s0 = peg$c6;\n                peg$currPos += 2;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e7); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c7) {\n                  s0 = peg$c7;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e8); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c8) {\n                    s0 = peg$c8;\n                    peg$currPos += 2;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e9); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c9) {\n                      s0 = peg$c9;\n                      peg$currPos += 2;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c10) {\n                        s0 = peg$c10;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2) === peg$c11) {\n                          s0 = peg$c11;\n                          peg$currPos += 2;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$e12); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c12) {\n                            s0 = peg$c12;\n                            peg$currPos += 2;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$e13); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c13) {\n                              s0 = peg$c13;\n                              peg$currPos += 2;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$e14); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 2) === peg$c14) {\n                                s0 = peg$c14;\n                                peg$currPos += 2;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$e15); }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parserubber_unit() {\n      var s0;\n\n      s0 = peg$parseunit();\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c15) {\n          s0 = peg$c15;\n          peg$currPos += 5;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e16); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s0 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e17); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c17) {\n              s0 = peg$c17;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e18); }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      s3 = peg$parsesign();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s4 = peg$currPos;\n      s5 = [];\n      if (peg$r0.test(input.charAt(peg$currPos))) {\n        s6 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e20); }\n      }\n      while (s6 !== peg$FAILED) {\n        s5.push(s6);\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n      }\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s6 = peg$c18;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e21); }\n      }\n      if (s6 !== peg$FAILED) {\n        s7 = [];\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s8 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s8 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n        if (s8 !== peg$FAILED) {\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            if (peg$r0.test(input.charAt(peg$currPos))) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e20); }\n            }\n          }\n        } else {\n          s7 = peg$FAILED;\n        }\n        if (s7 !== peg$FAILED) {\n          s5 = [s5, s6, s7];\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 === peg$FAILED) {\n        s4 = [];\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$r0.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e20); }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n      }\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f4(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e19); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesign() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s0 = peg$c19;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e22); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c20;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e23); }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e0); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = undefined;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})()", "// This file needs to be here because typescript does not know how to use babel's transpiler\n// to directly load Pegjs grammars.\n// @ts-nocheck\nimport _LatexPegParser from \"../grammars/latex.pegjs\";\nimport _AlignEnvironmentPegParser from \"../grammars/align-environment.pegjs\";\nimport _ArgSpecPegParser from \"../grammars/xparse-argspec.pegjs\";\nimport _PgfkeysPegParser from \"../grammars/pgfkeys.pegjs\";\nimport _MacroSubstitutionPegParser from \"../grammars/macro-substitutions.pegjs\";\nimport _LigaturesPegParser from \"../grammars/ligatures.pegjs\";\nimport _XColorPegParser from \"../grammars/xcolor-expressions.pegjs\";\nimport _TabularPegParser from \"../grammars/tabular-spec.pegjs\";\nimport _SystemePegParser from \"../grammars/systeme-environment.pegjs\";\nimport _GluePegParser from \"../grammars/tex-glue.pegjs\";\n\ntype PegParser = {\n    parse: (input: string | unknown[], options?: unknown) => any;\n    SyntaxError: (\n        message: string,\n        expected: string,\n        found: unknown,\n        location: unknown\n    ) => unknown;\n};\n\nconst LatexPegParser = _LatexPegParser as PegParser;\nconst AlignEnvironmentPegParser = _AlignEnvironmentPegParser as PegParser;\nconst ArgSpecPegParser = _ArgSpecPegParser as PegParser;\nconst PgfkeysPegParser = _PgfkeysPegParser as PegParser;\nconst MacroSubstitutionPegParser = _MacroSubstitutionPegParser as PegParser;\nconst LigaturesPegParser = _LigaturesPegParser as PegParser;\nconst XColorPegParser = _XColorPegParser as PegParser;\nconst TabularPegParser = _TabularPegParser as PegParser;\nconst SystemePegParser = _SystemePegParser as PegParser;\nconst GluePegParser = _GluePegParser as PegParser;\n\nexport {\n    LatexPegParser,\n    AlignEnvironmentPegParser,\n    ArgSpecPegParser,\n    PgfkeysPegParser,\n    MacroSubstitutionPegParser,\n    LigaturesPegParser,\n    XColorPegParser,\n    TabularPegParser,\n    SystemePegParser,\n    GluePegParser,\n};\n"],
  "mappings": "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",
  "names": []
}
