var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var unified_latex_util_align_exports = {};
__export(unified_latex_util_align_exports, {
  createMatchers: () => createMatchers,
  parseAlignEnvironment: () => parseAlignEnvironment
});
module.exports = __toCommonJS(unified_latex_util_align_exports);

// libs/parse-align-environment.ts
var import_unified_latex_util_match = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_pegjs = require("@unified-latex/unified-latex-util-pegjs");
function createMatchers(rowSepMacros, colSep) {
  const isRowSep = import_unified_latex_util_match.match.createMacroMatcher(rowSepMacros);
  return {
    isRowSep,
    isColSep: (node) => colSep.some((sep) => import_unified_latex_util_match.match.string(node, sep)),
    isWhitespace: (node) => import_unified_latex_util_match.match.whitespace(node),
    isSameLineComment: (node) => import_unified_latex_util_match.match.comment(node) && node.sameline,
    isOwnLineComment: (node) => import_unified_latex_util_match.match.comment(node) && !node.sameline
  };
}
function parseAlignEnvironment(ast, colSep = ["&"], rowSepMacros = ["\\", "hline", "cr"]) {
  if (!Array.isArray(ast)) {
    throw new Error("You must pass an array of nodes");
  }
  ast = (0, import_unified_latex_util_pegjs.decorateArrayForPegjs)([...ast]);
  return import_unified_latex_util_pegjs.AlignEnvironmentPegParser.parse(ast, createMatchers(rowSepMacros, colSep));
}
//# sourceMappingURL=index.cjs.map
