var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// package/exam/index.ts
var exam_exports = {};
__export(exam_exports, {
  environments: () => environments,
  macros: () => macros
});
module.exports = __toCommonJS(exam_exports);

// utils/enumerate.ts
var import_unified_latex_builder = require("@unified-latex/unified-latex-builder");
var import_unified_latex_util_match6 = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_render_info = require("@unified-latex/unified-latex-util-render-info");

// ../unified-latex-util-replace/dist/index.js
var import_unified_latex_util_visit = require("@unified-latex/unified-latex-util-visit");
var import_unified_latex_util_match = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_trim = require("@unified-latex/unified-latex-util-trim");
var import_unified_latex_util_visit2 = require("@unified-latex/unified-latex-util-visit");
var import_unified_latex_util_match2 = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_split = require("@unified-latex/unified-latex-util-split");
var import_unified_latex_util_trim2 = require("@unified-latex/unified-latex-util-trim");
var import_unified_latex_util_match3 = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_trim3 = require("@unified-latex/unified-latex-util-trim");
var import_unified_latex_util_match4 = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_trim4 = require("@unified-latex/unified-latex-util-trim");
var import_unified_latex_util_match5 = require("@unified-latex/unified-latex-util-match");
function lastSignificantNodeIndex(nodes, parbreaksAreInsignificant) {
  for (let i = nodes.length - 1; i >= 0; i--) {
    const node = nodes[i];
    if (import_unified_latex_util_match3.match.whitespace(node) || import_unified_latex_util_match3.match.comment(node) || parbreaksAreInsignificant && import_unified_latex_util_match3.match.parbreak(node)) {
      continue;
    }
    return i;
  }
  return void 0;
}

// utils/enumerate.ts
var import_unified_latex_util_split2 = require("@unified-latex/unified-latex-util-split");
var import_unified_latex_util_trim5 = require("@unified-latex/unified-latex-util-trim");
function cleanEnumerateBody(ast, itemName = "item") {
  let { segments, macros: macros2 } = (0, import_unified_latex_util_split2.splitOnMacro)(ast, itemName);
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    if (i === 0) {
      (0, import_unified_latex_util_trim5.trimEnd)(segment);
    } else {
      (0, import_unified_latex_util_trim5.trim)(segment);
    }
    if (segment.length > 0 && i > 0) {
      segment.unshift({ type: "whitespace" });
    }
  }
  let insertParbreakBefore = /* @__PURE__ */ new WeakSet();
  let body = macros2.flatMap((node, i) => {
    var _a;
    const segment = segments[i + 1];
    const trailingComments = popTrailingComments(segment);
    node.args = node.args || [];
    node.args.push((0, import_unified_latex_builder.arg)(segment, { openMark: "", closeMark: "" }));
    (0, import_unified_latex_util_render_info.updateRenderInfo)(node, { inParMode: true });
    if (i > 0 || ((_a = segments[0]) == null ? void 0 : _a.length) > 0) {
      insertParbreakBefore.add(node);
    }
    return [node, ...trailingComments];
  });
  body = body.flatMap((node) => insertParbreakBefore.has(node) ? [{ type: "parbreak" }, node] : node);
  body.unshift(...segments[0]);
  for (let i = 0; i < body.length - 1; i++) {
    const node = body[i];
    const nextNode = body[i + 1];
    if (!import_unified_latex_util_match6.match.parbreak(nextNode)) {
      continue;
    }
    if (import_unified_latex_util_match6.match.comment(node)) {
      node.suffixParbreak = true;
    }
    if (import_unified_latex_util_match6.match.macro(node) && node.args && node.args[node.args.length - 1].closeMark === "") {
      const args = node.args[node.args.length - 1].content;
      const lastArg = args[args.length - 1];
      if (import_unified_latex_util_match6.match.comment(lastArg)) {
        lastArg.suffixParbreak = true;
      }
    }
  }
  return body;
}
function popTrailingComments(nodes) {
  let lastNodeIndex = lastSignificantNodeIndex(nodes, true);
  if (lastNodeIndex === nodes.length - 1 || lastNodeIndex == null && nodes.length === 0) {
    return [];
  }
  if (lastNodeIndex == null) {
    lastNodeIndex = -1;
  }
  return nodes.splice(lastNodeIndex + 1);
}

// package/exam/provides.ts
var macros = {
  answerline: { signature: "o" },
  fillin: { signature: "o o" },
  fullwidth: { signature: "m" },
  fillwidthlines: { signature: "m" },
  fillwidthdottedlines: { signature: "m" },
  fillwidthgrid: { signature: "m" },
  makeemptybox: { signature: "m" },
  CorrectChoiceEmphasis: {
    signature: "m",
    renderInfo: { breakAround: true }
  },
  SolutionEmphasis: { signature: "m", renderInfo: { breakAround: true } },
  uplevel: { signature: "m", renderInfo: { breakAround: true } },
  checkboxchar: { signature: "m", renderInfo: { breakAround: true } },
  checkedchar: { signature: "m", renderInfo: { breakAround: true } },
  pointname: { signature: "m", renderInfo: { breakAround: true } },
  marginpointname: { signature: "m", renderInfo: { breakAround: true } },
  extrawidth: { signature: "m", renderInfo: { breakAround: true } },
  pointformat: { signature: "m", renderInfo: { breakAround: true } },
  bonuspointformat: { signature: "m", renderInfo: { breakAround: true } },
  totalformat: { signature: "m", renderInfo: { breakAround: true } },
  qformat: { signature: "m", renderInfo: { breakAround: true } },
  titledquestion: { signature: "m o", renderInfo: { breakAround: true } },
  pointpoints: { signature: "m m", renderInfo: { breakAround: true } },
  bonuspointpoints: { signature: "m m", renderInfo: { breakAround: true } }
};
var environments = {
  choices: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "choice")
  },
  checkboxes: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "choice")
  },
  oneparchoices: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "choice")
  },
  oneparcheckboxes: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "choice")
  },
  parts: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "part")
  },
  subparts: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "subpart")
  },
  subsubparts: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "subsubpart")
  },
  questions: {
    signature: "o",
    processContent: (nodes) => cleanEnumerateBody(nodes, "question")
  }
};
//# sourceMappingURL=index.cjs.map
