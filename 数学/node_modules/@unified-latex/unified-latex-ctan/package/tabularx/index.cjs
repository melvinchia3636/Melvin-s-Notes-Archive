var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// package/tabularx/index.ts
var tabularx_exports = {};
__export(tabularx_exports, {
  environments: () => environments,
  macros: () => macros,
  parseTabularSpec: () => parseTabularSpec,
  printRaw: () => printRaw
});
module.exports = __toCommonJS(tabularx_exports);

// package/tabularx/provides.ts
var macros = {};
var environments = {
  tabularx: { signature: "m o m", renderInfo: { alignContent: true } }
};

// package/tabularx/libs/parser.ts
var import_unified_latex_util_pegjs = require("@unified-latex/unified-latex-util-pegjs");
var import_unified_latex_util_match = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_pegjs2 = require("@unified-latex/unified-latex-util-pegjs");
function createMatchers() {
  return {
    matchChar: (node, char) => import_unified_latex_util_match.match.string(node, char),
    isWhitespace: import_unified_latex_util_match.match.whitespace,
    isGroup: import_unified_latex_util_match.match.group
  };
}
function parseTabularSpec(ast) {
  if (!Array.isArray(ast)) {
    throw new Error("You must pass an array of nodes");
  }
  ast = (0, import_unified_latex_util_pegjs2.splitStringsIntoSingleChars)(ast);
  ast = (0, import_unified_latex_util_pegjs2.decorateArrayForPegjs)([...ast]);
  return import_unified_latex_util_pegjs.TabularPegParser.parse(ast, createMatchers());
}

// package/tabularx/libs/print-raw.ts
var import_unified_latex_util_print_raw = require("@unified-latex/unified-latex-util-print-raw");
function printRaw(node, root = false) {
  if (typeof node === "string") {
    return node;
  }
  if (Array.isArray(node)) {
    const sepToken = root ? " " : "";
    return node.map((tok) => printRaw(tok)).join(sepToken);
  }
  switch (node.type) {
    case "vert_divider":
      return "|";
    case "at_divider":
      return `@{${(0, import_unified_latex_util_print_raw.printRaw)(node.content)}}`;
    case "bang_divider":
      return `!{${(0, import_unified_latex_util_print_raw.printRaw)(node.content)}}`;
    case "alignment":
      if (node.alignment === "left") {
        return "l";
      }
      if (node.alignment === "right") {
        return "r";
      }
      if (node.alignment === "center") {
        return "c";
      }
      if (node.alignment === "X") {
        return "X";
      }
      if (node.alignment === "parbox") {
        if (node.baseline === "top") {
          return `p{${(0, import_unified_latex_util_print_raw.printRaw)(node.size)}}`;
        }
        if (node.baseline === "default") {
          return `m{${(0, import_unified_latex_util_print_raw.printRaw)(node.size)}}`;
        }
        if (node.baseline === "bottom") {
          return `b{${(0, import_unified_latex_util_print_raw.printRaw)(node.size)}}`;
        }
        return `w{${(0, import_unified_latex_util_print_raw.printRaw)(node.baseline)}}{${(0, import_unified_latex_util_print_raw.printRaw)(node.size)}}`;
      }
      break;
    case "decl_code":
      return (0, import_unified_latex_util_print_raw.printRaw)(node.code);
    case "column":
      const end_code = node.before_end_code ? `<{${printRaw(node.before_end_code)}}` : "";
      const start_code = node.before_start_code ? `>{${printRaw(node.before_start_code)}}` : "";
      return [
        printRaw(node.pre_dividers),
        start_code,
        printRaw(node.alignment),
        end_code,
        printRaw(node.post_dividers)
      ].join("");
    default:
      console.warn(`Unknown node type "${node.type}" for node`, node);
      return "";
  }
  return "";
}
//# sourceMappingURL=index.cjs.map
