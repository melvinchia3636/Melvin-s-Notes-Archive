{
  "version": 3,
  "sources": ["../../../package/xcolor/index.ts", "../../../package/xcolor/provides.ts", "../../../package/xcolor/libs/xcolor.ts", "../../../package/xcolor/libs/predefined-colors.ts", "../../../package/xcolor/libs/parser.ts", "../../../package/xcolor/libs/print-raw.ts", "../../../package/xcolor/libs/xcolor-macro-to-hex.ts", "../../../../structured-clone/index.ts", "../../../package/xcolor/libs/color-to-textcolor-macro.ts"],
  "sourcesContent": ["export * from \"./provides\";\nexport * from \"./libs/xcolor\";\nexport * from \"./libs/types\";\nexport * from \"./libs/parser\";\nexport * from \"./libs/print-raw\";\nexport * from \"./libs/predefined-colors\";\nexport * from \"./libs/xcolor-macro-to-hex\";\nexport * from \"./libs/color-to-textcolor-macro\";\n", "import { MacroInfoRecord, EnvInfoRecord } from \"@unified-latex/unified-latex-types\";\n\nexport const macros: MacroInfoRecord = {\n    substitutecolormodel: {\n        signature: \"m m\",\n        renderInfo: { breakAround: true },\n    },\n    selectcolormodel: {\n        signature: \"m\",\n        renderInfo: { breakAround: true },\n    },\n    definecolor: {\n        signature: \"o m m m\",\n        renderInfo: { breakAround: true },\n    },\n    providecolor: {\n        signature: \"o m m m\",\n        renderInfo: { breakAround: true },\n    },\n    colorlet: {\n        signature: \"o m o m\",\n        renderInfo: { breakAround: true },\n    },\n    definecolorset: {\n        signature: \"o m m m\",\n        renderInfo: { breakAround: true },\n    },\n    providecolorset: {\n        signature: \"o m m m m\",\n        renderInfo: { breakAround: true },\n    },\n    preparecolor: {\n        signature: \"o m m m\",\n        renderInfo: { breakAround: true },\n    },\n    preparecolorset: {\n        signature: \"o m m m m\",\n        renderInfo: { breakAround: true },\n    },\n    DefineNamedColor: {\n        signature: \"m m m m\",\n        renderInfo: { breakAround: true },\n    },\n    definecolors: {\n        signature: \"m\",\n        renderInfo: { breakAround: true },\n    },\n    providecolors: {\n        signature: \"m\",\n        renderInfo: { breakAround: true },\n    },\n    color: { signature: \"o m\", renderInfo: { breakAround: true } },\n    textcolor: { signature: \"o m m\", renderInfo: { inParMode: true } },\n    pagecolor: { signature: \"o m\" },\n    colorbox: { signature: \"o m m\" },\n    fcolorbox: { signature: \"o m o m m\" },\n    boxframe: { signature: \"o m\" },\n    testcolor: { signature: \"o m\" },\n    blendcolors: { signature: \"s m\" },\n    maskcolors: { signature: \"o m\" },\n    definecolorseries: {\n        signature: \"m m m o m o m\",\n        renderInfo: { breakAround: true },\n    },\n    resetcolorseries: {\n        signature: \"o m\",\n        renderInfo: { breakAround: true },\n    },\n    rowcolors: { signature: \"s o m m m\" },\n    extractcolorspec: { signature: \"m m\" },\n    extractcolorspecs: { signature: \"m m m\" },\n    convertcolorspec: { signature: \"m m m m\" },\n};\n\nexport const environments: EnvInfoRecord = {\n    testcolors: { signature: \"o\", renderInfo: { pgfkeysArgs: true } },\n};\n", "import Color from \"color\";\nimport { DVI_PS_NAMES, SVG_NAMES, X11_NAMES } from \"./predefined-colors\";\nimport { XColor } from \"./types\";\nimport { parse as xcolorParser } from \"./parser\";\n\nconst CORE_MODELS = new Set([\"rgb\", \"cmy\", \"cmyk\", \"hsb\", \"gray\"]);\n\nexport const XColorCoreModelToColor = {\n    rgb: ([r, g, b]: number[]) => Color([r * 255, g * 255, b * 255], \"rgb\"),\n    cmy: ([c, m, y]: number[]) =>\n        XColorCoreModelToColor.rgb([1 - c, 1 - m, 1 - y]),\n    cmyk: ([c, m, y, k]: number[]) =>\n        Color([c * 255, m * 255, y * 255, k * 100], \"cmyk\"),\n    hsb: ([h, s, b]: number[]) => Color([h * 360, s * 100, b * 100], \"hsv\"),\n    gray: ([v]: number[]) => Color([v * 255, v * 255, v * 255], \"rgb\"),\n};\nconst XColorModelToColor = {\n    wave: ([lambda]: number[]) => {\n        // Constants according to the xcolor readme\n        const gamma = 0.8;\n        let baseRgb = [0, 0, 0];\n        if (380 <= lambda && lambda < 440) {\n            baseRgb = [(440 - lambda) / (440 - 380), 0, 1];\n        }\n        if (440 <= lambda && lambda < 490) {\n            baseRgb = [0, (lambda - 440) / (490 - 440), 1];\n        }\n        if (490 <= lambda && lambda < 510) {\n            baseRgb = [0, 1, (510 - lambda) / (510 - 490)];\n        }\n        if (510 <= lambda && lambda < 580) {\n            baseRgb = [(lambda - 510) / (580 - 510), 1, 0];\n        }\n        if (580 <= lambda && lambda < 6450) {\n            baseRgb = [1, (645 - lambda) / (645 - 580), 0];\n        }\n        if (645 <= lambda && lambda <= 780) {\n            baseRgb = [1, 0, 0];\n        }\n        let f = 1.0;\n        if (380 <= lambda && 420 < lambda) {\n            f = 0.3 + (0.7 * (lambda - 380)) / (420 - 380);\n        }\n        if (700 < lambda && lambda <= 780) {\n            f = 0.3 + (0.7 * (780 - lambda)) / (780 - 700);\n        }\n\n        const rgb = [\n            Math.pow(baseRgb[0] * f, gamma),\n            Math.pow(baseRgb[1] * f, gamma),\n            Math.pow(baseRgb[2] * f, gamma),\n        ];\n\n        return Color([rgb[0] * 255, rgb[1] * 255, rgb[2] * 255], \"rgb\");\n    },\n    Hsb: ([h, s, b]: number[]) => XColorCoreModelToColor.hsb([h / 360, s, b]),\n    HSB: ([h, s, b]: number[]) =>\n        XColorCoreModelToColor.hsb([h / 240, s / 240, b / 240]),\n    HTML: ([v]: [string]) => (v.startsWith(\"#\") ? Color(v) : Color(`#${v}`)),\n    RGB: ([r, g, b]: number[]) => Color([r, g, b], \"rgb\"),\n    Gray: ([v]: number[]) => XColorCoreModelToColor.gray([v / 15]),\n    ...XColorCoreModelToColor,\n};\n\nconst ColorToXColorModel = {\n    rgb: (color: Color<any>) =>\n        color\n            .rgb()\n            .array()\n            .map((v) => v / 255),\n    cmy: (color: Color<any>) =>\n        [255 - color.red(), 255 - color.green(), 255 - color.blue()].map(\n            (v) => v / 255\n        ),\n    cmyk: (color: Color<any>) =>\n        color\n            .cmyk()\n            .array()\n            // The k component goes from 0-100\n            .map((v, i) => (i === 3 ? v / 100 : v / 255)),\n    hsb: (color: Color<any>) => [\n        color.hue() / 360,\n        color.saturationv() / 100,\n        color.value() / 100,\n    ],\n    gray: (color: Color<any>) => [color.gray() / 100],\n};\n\nexport const PREDEFINED_XCOLOR_COLORS: Record<string, Color<any>> = {\n    // Core colors\n    red: XColorCoreModelToColor.rgb([1, 0, 0]),\n    green: XColorCoreModelToColor.rgb([0, 1, 0]),\n    blue: XColorCoreModelToColor.rgb([0, 0, 1]),\n    brown: XColorCoreModelToColor.rgb([0.75, 0.5, 0.25]),\n    lime: XColorCoreModelToColor.rgb([0.75, 1, 0]),\n    orange: XColorCoreModelToColor.rgb([1, 0.5, 0]),\n    pink: XColorCoreModelToColor.rgb([1, 0.75, 0.75]),\n    purple: XColorCoreModelToColor.rgb([0.75, 0, 0.25]),\n    teal: XColorCoreModelToColor.rgb([0, 0.5, 0.5]),\n    violet: XColorCoreModelToColor.rgb([0.5, 0, 0.5]),\n    cyan: XColorCoreModelToColor.rgb([0, 1, 1]),\n    magenta: XColorCoreModelToColor.rgb([1, 0, 1]),\n    yellow: XColorCoreModelToColor.rgb([1, 1, 0]),\n    olive: XColorCoreModelToColor.rgb([0.5, 0.5, 0]),\n    black: XColorCoreModelToColor.rgb([0, 0, 0]),\n    darkgray: XColorCoreModelToColor.rgb([0.25, 0.25, 0.25]),\n    gray: XColorCoreModelToColor.rgb([0.5, 0.5, 0.5]),\n    lightgray: XColorCoreModelToColor.rgb([0.75, 0.75, 0.75]),\n    white: XColorCoreModelToColor.rgb([1, 1, 1]),\n    ...DVI_PS_NAMES,\n    ...SVG_NAMES,\n    ...X11_NAMES,\n};\n\nfunction scalarMul(scalar: number, vec: number[]) {\n    return vec.map((v) => scalar * v);\n}\nfunction addVectors(...vecs: number[][]) {\n    return vecs.reduce((prev, current) => prev.map((v, i) => v + current[i]));\n}\n\n/**\n * Mix a color in color model `model` as per the algorithm in 2.3.3 of the xcolor manual.\n */\nfunction mixInModel(\n    model: string,\n    colorsAndCoefficients: [number, Color<any>][]\n): Color<any> {\n    if (!CORE_MODELS.has(model)) {\n        throw new Error(\n            `Cannot mix colors in model \"${model}\"; only core modes ${Array.from(\n                CORE_MODELS\n            ).join(\", \")} are supported`\n        );\n    }\n    const toModel =\n        ColorToXColorModel[model as keyof typeof ColorToXColorModel];\n    const fromModel =\n        XColorCoreModelToColor[model as keyof typeof XColorCoreModelToColor];\n\n    const mixed = addVectors(\n        ...colorsAndCoefficients.map(([v, color]) => {\n            const colorInModel = toModel(color);\n            return scalarMul(v, colorInModel);\n        })\n    );\n    return fromModel(mixed);\n}\n\n/**\n * Given a parsed `XColor`, compute the color and return a `Color` object\n * (that can be used in CSS, for example).\n */\nexport function computeColor(\n    expr: XColor,\n    predefinedColors: Record<string, Color<any>> = {}\n): Color<any> {\n    if (expr.type !== \"color\") {\n        throw new Error(\n            `Can only compute the color of a \"color\" expression, not one of type ${expr.type}`\n        );\n    }\n\n    const knownColors = { ...PREDEFINED_XCOLOR_COLORS, ...predefinedColors };\n    function getColor(name: string) {\n        if (!knownColors[name]) {\n            throw new Error(`Unknown color \"${name}\"`);\n        }\n        return knownColors[name];\n    }\n\n    const color = expr.color;\n    let computedColor = Color(\"#000000\");\n    if (color.type === \"expr\") {\n        // From the algorithm in 2.3.2 of the xcolor manual\n\n        // TODO: the suffix `!![num]` is not yet implemented.\n        let base = getColor(color.name);\n        for (const mix of color.mix_expr) {\n            if (mix.type === \"complete_mix\") {\n                const mixColor = getColor(mix.name);\n                base = base.mix(mixColor, 1 - mix.mix_percent / 100);\n            } else if (mix.type === \"partial_mix\") {\n                base = base.mix(Color(\"#FFFFFF\"), 1 - mix.mix_percent / 100);\n            }\n        }\n        if (color.prefix && color.prefix.length % 2 === 1) {\n            base = base.rotate(180);\n        }\n        computedColor = base;\n    }\n    if (color.type === \"extended_expr\") {\n        const model = color.core_model;\n        const div =\n            color.div ||\n            color.expressions.reduce((a, expr) => a + expr.weight, 0);\n        if (div <= 0) {\n            throw new Error(\n                `Cannot mix color with ratios that have a denominator of ${div}`\n            );\n        }\n        const colorsToMix: [number, Color<any>][] = color.expressions.map(\n            (expr) => [\n                expr.weight / div,\n                computeColor({\n                    type: \"color\",\n                    color: expr.color,\n                    functions: [],\n                }),\n            ]\n        );\n        computedColor = mixInModel(model, colorsToMix);\n    }\n\n    // Now we apply any color functions\n    for (const func of expr.functions) {\n        if (func.name === \"wheel\") {\n            const angle = func.args[0];\n            const circ = func.args[1] || 360;\n            computedColor = computedColor.rotate((angle / circ) * 360);\n        }\n        if (func.name === \"twheel\") {\n            // This function depends on the definition of \\rangetHsb, which we\n            // don't actually know, so we just use it's default, which is to\n            // add a 60 deg. angle to everything. I think...\n            const angle = func.args[0];\n            const circ = func.args[1] || 360;\n            computedColor = computedColor.rotate((angle / circ) * 360 + 60);\n        }\n    }\n\n    return computedColor;\n}\n\n/**\n * Convert the xcolor defined color to RGB Hex representation.\n * If the color is unknown or cannot be computed, `null` is returned.\n *\n * If `model` is supplied,\n *\n * The most likely reason a color will be `null` is if the color is defined\n * using a pre-defined color that wasn't supplied as an argument.\n */\nexport function xcolorColorToHex(\n    color: string,\n    model?: string | null,\n    options: {\n        predefinedColors?: Record<string, Color<any>>;\n    } = { predefinedColors: {} }\n): string | null {\n    const { predefinedColors = {} } = options;\n    const parsed = xcolorParser(color);\n    // If a model was entered, the corresponding color was directly entered without\n    // mixing, unless the parsed type was \"color\". This would through an error in `xcolor`,\n    // but we won't error.\n    if (model && model !== \"default\" && parsed.type !== \"color\") {\n        if (!(model in XColorModelToColor)) {\n            throw new Error(\n                `Unknown color model \"${model}\"; known models are ${Object.keys(\n                    XColorModelToColor\n                ).join(\", \")}`\n            );\n        }\n        if (parsed.type !== \"hex_spec\" && parsed.type !== \"num_spec\") {\n            throw new Error(\n                `Cannot use model ${model} to compute the color \"${color}\"`\n            );\n        }\n\n        if (model === \"HTML\" && parsed.type === \"hex_spec\") {\n            return XColorModelToColor.HTML(parsed.content).hex();\n        } else if (parsed.type === \"num_spec\") {\n            type x = keyof Omit<typeof XColorModelToColor, \"HTML\">;\n            return XColorModelToColor[\n                model as keyof Omit<typeof XColorModelToColor, \"HTML\">\n            ](parsed.content).hex();\n        }\n\n        throw new Error(\n            `Don't know how to process color \"${color}\" in model \"${model}\"`\n        );\n    }\n\n    if (Array.isArray(parsed) || parsed.type !== \"color\") {\n        throw new Error(\n            `Cannot the color \"${color}\" is not a valid color string`\n        );\n    }\n    let computed: Color<any> | null = null;\n    try {\n        computed = computeColor(parsed, predefinedColors);\n    } catch (e) {}\n\n    return computed && computed.hex();\n}\n", "import Color from \"color\";\n\nconst fromRgb = ([r, g, b]: number[]) =>\n    Color([r * 255, g * 255, b * 255], \"rgb\");\n\nexport const DVI_PS_NAMES = {\n    Apricot: Color(\"#FBB982\"),\n    Aquamarine: Color(\"#00B5BE\"),\n    Bittersweet: Color(\"#C04F17\"),\n    Black: Color(\"#221E1F\"),\n    Blue: Color(\"#2D2F92\"),\n    BlueGreen: Color(\"#00B3B8\"),\n    BlueViolet: Color(\"#473992\"),\n    BrickRed: Color(\"#B6321C\"),\n    Brown: Color(\"#792500\"),\n    BurntOrange: Color(\"#F7921D\"),\n    CadetBlue: Color(\"#74729A\"),\n    CarnationPink: Color(\"#F282B4\"),\n    Cerulean: Color(\"#00A2E3\"),\n    CornflowerBlue: Color(\"#41B0E4\"),\n    Cyan: Color(\"#00AEEF\"),\n    Dandelion: Color(\"#FDBC42\"),\n    DarkOrchid: Color(\"#A4538A\"),\n    Emerald: Color(\"#00A99D\"),\n    ForestGreen: Color(\"#009B55\"),\n    Fuchsia: Color(\"#8C368C\"),\n    Goldenrod: Color(\"#FFDF42\"),\n    Gray: Color(\"#949698\"),\n    Green: Color(\"#00A64F\"),\n    GreenYellow: Color(\"#DFE674\"),\n    JungleGreen: Color(\"#00A99A\"),\n    Lavender: Color(\"#F49EC4\"),\n    LimeGreen: Color(\"#8DC73E\"),\n    Magenta: Color(\"#EC008C\"),\n    Mahogany: Color(\"#A9341F\"),\n    Maroon: Color(\"#AF3235\"),\n    Melon: Color(\"#F89E7B\"),\n    MidnightBlue: Color(\"#006795\"),\n    Mulberry: Color(\"#A93C93\"),\n    NavyBlue: Color(\"#006EB8\"),\n    OliveGreen: Color(\"#3C8031\"),\n    Orange: Color(\"#F58137\"),\n    OrangeRed: Color(\"#ED135A\"),\n    Orchid: Color(\"#AF72B0\"),\n    Peach: Color(\"#F7965A\"),\n    Periwinkle: Color(\"#7977B8\"),\n    PineGreen: Color(\"#008B72\"),\n    Plum: Color(\"#92268F\"),\n    ProcessBlue: Color(\"#00B0F0\"),\n    Purple: Color(\"#99479B\"),\n    RawSienna: Color(\"#974006\"),\n    Red: Color(\"#ED1B23\"),\n    RedOrange: Color(\"#F26035\"),\n    RedViolet: Color(\"#A1246B\"),\n    Rhodamine: Color(\"#EF559F\"),\n    RoyalBlue: Color(\"#0071BC\"),\n    RoyalPurple: Color(\"#613F99\"),\n    RubineRed: Color(\"#ED017D\"),\n    Salmon: Color(\"#F69289\"),\n    SeaGreen: Color(\"#3FBC9D\"),\n    Sepia: Color(\"#671800\"),\n    SkyBlue: Color(\"#46C5DD\"),\n    SpringGreen: Color(\"#C6DC67\"),\n    Tan: Color(\"#DA9D76\"),\n    TealBlue: Color(\"#00AEB3\"),\n    Thistle: Color(\"#D883B7\"),\n    Turquoise: Color(\"#00B4CE\"),\n    Violet: Color(\"#58429B\"),\n    VioletRed: Color(\"#EF58A0\"),\n    White: Color(\"#FFFFFF\"),\n    WildStrawberry: Color(\"#EE2967\"),\n    Yellow: Color(\"#FFF200\"),\n    YellowGreen: Color(\"#98CC70\"),\n    YellowOrange: Color(\"#FAA21A\"),\n};\n\nexport const SVG_NAMES = {\n    AliceBlue: fromRgb([0.94, 0.972, 1]),\n    AntiqueWhite: fromRgb([0.98, 0.92, 0.844]),\n    Aqua: fromRgb([0, 1, 1]),\n    Aquamarine: fromRgb([0.498, 1, 0.83]),\n    Azure: fromRgb([0.94, 1, 1]),\n    Beige: fromRgb([0.96, 0.96, 0.864]),\n    Bisque: fromRgb([1, 0.894, 0.77]),\n    Black: fromRgb([0, 0, 0]),\n    BlanchedAlmond: fromRgb([1, 0.92, 0.804]),\n    Blue: fromRgb([0, 0, 1]),\n    BlueViolet: fromRgb([0.54, 0.17, 0.888]),\n    Brown: fromRgb([0.648, 0.165, 0.165]),\n    BurlyWood: fromRgb([0.87, 0.72, 0.53]),\n    CadetBlue: fromRgb([0.372, 0.62, 0.628]),\n    Chartreuse: fromRgb([0.498, 1, 0]),\n    Chocolate: fromRgb([0.824, 0.41, 0.116]),\n    Coral: fromRgb([1, 0.498, 0.312]),\n    CornflowerBlue: fromRgb([0.392, 0.585, 0.93]),\n    Cornsilk: fromRgb([1, 0.972, 0.864]),\n    Crimson: fromRgb([0.864, 0.08, 0.235]),\n    Cyan: fromRgb([0, 1, 1]),\n    DarkBlue: fromRgb([0, 0, 0.545]),\n    DarkCyan: fromRgb([0, 0.545, 0.545]),\n    DarkGoldenrod: fromRgb([0.72, 0.525, 0.044]),\n    DarkGray: fromRgb([0.664, 0.664, 0.664]),\n    DarkGreen: fromRgb([0, 0.392, 0]),\n    DarkGrey: fromRgb([0.664, 0.664, 0.664]),\n    DarkKhaki: fromRgb([0.74, 0.716, 0.42]),\n    DarkMagenta: fromRgb([0.545, 0, 0.545]),\n    DarkOliveGreen: fromRgb([0.332, 0.42, 0.185]),\n    DarkOrange: fromRgb([1, 0.55, 0]),\n    DarkOrchid: fromRgb([0.6, 0.196, 0.8]),\n    DarkRed: fromRgb([0.545, 0, 0]),\n    DarkSalmon: fromRgb([0.912, 0.59, 0.48]),\n    DarkSeaGreen: fromRgb([0.56, 0.736, 0.56]),\n    DarkSlateBlue: fromRgb([0.284, 0.24, 0.545]),\n    DarkSlateGray: fromRgb([0.185, 0.31, 0.31]),\n    DarkSlateGrey: fromRgb([0.185, 0.31, 0.31]),\n    DarkTurquoise: fromRgb([0, 0.808, 0.82]),\n    DarkViolet: fromRgb([0.58, 0, 0.828]),\n    DeepPink: fromRgb([1, 0.08, 0.576]),\n    DeepSkyBlue: fromRgb([0, 0.75, 1]),\n    DimGray: fromRgb([0.41, 0.41, 0.41]),\n    DimGrey: fromRgb([0.41, 0.41, 0.41]),\n    DodgerBlue: fromRgb([0.116, 0.565, 1]),\n    FireBrick: fromRgb([0.698, 0.132, 0.132]),\n    FloralWhite: fromRgb([1, 0.98, 0.94]),\n    ForestGreen: fromRgb([0.132, 0.545, 0.132]),\n    Fuchsia: fromRgb([1, 0, 1]),\n    Gainsboro: fromRgb([0.864, 0.864, 0.864]),\n    GhostWhite: fromRgb([0.972, 0.972, 1]),\n    Gold: fromRgb([1, 0.844, 0]),\n    Goldenrod: fromRgb([0.855, 0.648, 0.125]),\n    Gray: fromRgb([0.5, 0.5, 0.5]),\n    Green: fromRgb([0, 0.5, 0]),\n    GreenYellow: fromRgb([0.68, 1, 0.185]),\n    Grey: fromRgb([0.5, 0.5, 0.5]),\n    Honeydew: fromRgb([0.94, 1, 0.94]),\n    HotPink: fromRgb([1, 0.41, 0.705]),\n    IndianRed: fromRgb([0.804, 0.36, 0.36]),\n    Indigo: fromRgb([0.294, 0, 0.51]),\n    Ivory: fromRgb([1, 1, 0.94]),\n    Khaki: fromRgb([0.94, 0.9, 0.55]),\n    Lavender: fromRgb([0.9, 0.9, 0.98]),\n    LavenderBlush: fromRgb([1, 0.94, 0.96]),\n    LawnGreen: fromRgb([0.488, 0.99, 0]),\n    LemonChiffon: fromRgb([1, 0.98, 0.804]),\n    LightBlue: fromRgb([0.68, 0.848, 0.9]),\n    LightCoral: fromRgb([0.94, 0.5, 0.5]),\n    LightCyan: fromRgb([0.88, 1, 1]),\n    LightGoldenrod: fromRgb([0.933, 0.867, 0.51]),\n    LightGoldenrodYellow: fromRgb([0.98, 0.98, 0.824]),\n    LightGray: fromRgb([0.828, 0.828, 0.828]),\n    LightGreen: fromRgb([0.565, 0.932, 0.565]),\n    LightGrey: fromRgb([0.828, 0.828, 0.828]),\n    LightPink: fromRgb([1, 0.712, 0.756]),\n    LightSalmon: fromRgb([1, 0.628, 0.48]),\n    LightSeaGreen: fromRgb([0.125, 0.698, 0.668]),\n    LightSkyBlue: fromRgb([0.53, 0.808, 0.98]),\n    LightSlateBlue: fromRgb([0.518, 0.44, 1]),\n    LightSlateGray: fromRgb([0.468, 0.532, 0.6]),\n    LightSlateGrey: fromRgb([0.468, 0.532, 0.6]),\n    LightSteelBlue: fromRgb([0.69, 0.77, 0.87]),\n    LightYellow: fromRgb([1, 1, 0.88]),\n    Lime: fromRgb([0, 1, 0]),\n    LimeGreen: fromRgb([0.196, 0.804, 0.196]),\n    Linen: fromRgb([0.98, 0.94, 0.9]),\n    Magenta: fromRgb([1, 0, 1]),\n    Maroon: fromRgb([0.5, 0, 0]),\n    MediumAquamarine: fromRgb([0.4, 0.804, 0.668]),\n    MediumBlue: fromRgb([0, 0, 0.804]),\n    MediumOrchid: fromRgb([0.73, 0.332, 0.828]),\n    MediumPurple: fromRgb([0.576, 0.44, 0.86]),\n    MediumSeaGreen: fromRgb([0.235, 0.7, 0.444]),\n    MediumSlateBlue: fromRgb([0.484, 0.408, 0.932]),\n    MediumSpringGreen: fromRgb([0, 0.98, 0.604]),\n    MediumTurquoise: fromRgb([0.284, 0.82, 0.8]),\n    MediumVioletRed: fromRgb([0.78, 0.084, 0.52]),\n    MidnightBlue: fromRgb([0.098, 0.098, 0.44]),\n    MintCream: fromRgb([0.96, 1, 0.98]),\n    MistyRose: fromRgb([1, 0.894, 0.884]),\n    Moccasin: fromRgb([1, 0.894, 0.71]),\n    NavajoWhite: fromRgb([1, 0.87, 0.68]),\n    Navy: fromRgb([0, 0, 0.5]),\n    NavyBlue: fromRgb([0, 0, 0.5]),\n    OldLace: fromRgb([0.992, 0.96, 0.9]),\n    Olive: fromRgb([0.5, 0.5, 0]),\n    OliveDrab: fromRgb([0.42, 0.556, 0.136]),\n    Orange: fromRgb([1, 0.648, 0]),\n    OrangeRed: fromRgb([1, 0.27, 0]),\n    Orchid: fromRgb([0.855, 0.44, 0.84]),\n    PaleGoldenrod: fromRgb([0.932, 0.91, 0.668]),\n    PaleGreen: fromRgb([0.596, 0.985, 0.596]),\n    PaleTurquoise: fromRgb([0.688, 0.932, 0.932]),\n    PaleVioletRed: fromRgb([0.86, 0.44, 0.576]),\n    PapayaWhip: fromRgb([1, 0.936, 0.835]),\n    PeachPuff: fromRgb([1, 0.855, 0.725]),\n    Peru: fromRgb([0.804, 0.52, 0.248]),\n    Pink: fromRgb([1, 0.752, 0.796]),\n    Plum: fromRgb([0.868, 0.628, 0.868]),\n    PowderBlue: fromRgb([0.69, 0.88, 0.9]),\n    Purple: fromRgb([0.5, 0, 0.5]),\n    Red: fromRgb([1, 0, 0]),\n    RosyBrown: fromRgb([0.736, 0.56, 0.56]),\n    RoyalBlue: fromRgb([0.255, 0.41, 0.884]),\n    SaddleBrown: fromRgb([0.545, 0.27, 0.075]),\n    Salmon: fromRgb([0.98, 0.5, 0.448]),\n    SandyBrown: fromRgb([0.956, 0.644, 0.376]),\n    SeaGreen: fromRgb([0.18, 0.545, 0.34]),\n    Seashell: fromRgb([1, 0.96, 0.932]),\n    Sienna: fromRgb([0.628, 0.32, 0.176]),\n    Silver: fromRgb([0.752, 0.752, 0.752]),\n    SkyBlue: fromRgb([0.53, 0.808, 0.92]),\n    SlateBlue: fromRgb([0.415, 0.352, 0.804]),\n    SlateGray: fromRgb([0.44, 0.5, 0.565]),\n    SlateGrey: fromRgb([0.44, 0.5, 0.565]),\n    Snow: fromRgb([1, 0.98, 0.98]),\n    SpringGreen: fromRgb([0, 1, 0.498]),\n    SteelBlue: fromRgb([0.275, 0.51, 0.705]),\n    Tan: fromRgb([0.824, 0.705, 0.55]),\n    Teal: fromRgb([0, 0.5, 0.5]),\n    Thistle: fromRgb([0.848, 0.75, 0.848]),\n    Tomato: fromRgb([1, 0.39, 0.28]),\n    Turquoise: fromRgb([0.25, 0.88, 0.815]),\n    Violet: fromRgb([0.932, 0.51, 0.932]),\n    VioletRed: fromRgb([0.816, 0.125, 0.565]),\n    Wheat: fromRgb([0.96, 0.87, 0.7]),\n    White: fromRgb([1, 1, 1]),\n    WhiteSmoke: fromRgb([0.96, 0.96, 0.96]),\n    Yellow: fromRgb([1, 1, 0]),\n    YellowGreen: fromRgb([0.604, 0.804, 0.196]),\n};\n\nexport const X11_NAMES = {\n    AntiqueWhite1: fromRgb([1, 0.936, 0.86]),\n    AntiqueWhite2: fromRgb([0.932, 0.875, 0.8]),\n    AntiqueWhite3: fromRgb([0.804, 0.752, 0.69]),\n    AntiqueWhite4: fromRgb([0.545, 0.512, 0.47]),\n    Aquamarine1: fromRgb([0.498, 1, 0.83]),\n    Aquamarine2: fromRgb([0.464, 0.932, 0.776]),\n    Aquamarine3: fromRgb([0.4, 0.804, 0.668]),\n    Aquamarine4: fromRgb([0.27, 0.545, 0.455]),\n    Azure1: fromRgb([0.94, 1, 1]),\n    Azure2: fromRgb([0.88, 0.932, 0.932]),\n    Azure3: fromRgb([0.756, 0.804, 0.804]),\n    Azure4: fromRgb([0.512, 0.545, 0.545]),\n    Bisque1: fromRgb([1, 0.894, 0.77]),\n    Bisque2: fromRgb([0.932, 0.835, 0.716]),\n    Bisque3: fromRgb([0.804, 0.716, 0.62]),\n    Bisque4: fromRgb([0.545, 0.49, 0.42]),\n    Blue1: fromRgb([0, 0, 1]),\n    Blue2: fromRgb([0, 0, 0.932]),\n    Blue3: fromRgb([0, 0, 0.804]),\n    Blue4: fromRgb([0, 0, 0.545]),\n    Brown1: fromRgb([1, 0.25, 0.25]),\n    Brown2: fromRgb([0.932, 0.23, 0.23]),\n    Brown3: fromRgb([0.804, 0.2, 0.2]),\n    Brown4: fromRgb([0.545, 0.136, 0.136]),\n    Burlywood1: fromRgb([1, 0.828, 0.608]),\n    Burlywood2: fromRgb([0.932, 0.772, 0.57]),\n    Burlywood3: fromRgb([0.804, 0.668, 0.49]),\n    Burlywood4: fromRgb([0.545, 0.45, 0.332]),\n    CadetBlue1: fromRgb([0.596, 0.96, 1]),\n    CadetBlue2: fromRgb([0.556, 0.898, 0.932]),\n    CadetBlue3: fromRgb([0.48, 0.772, 0.804]),\n    CadetBlue4: fromRgb([0.325, 0.525, 0.545]),\n    Chartreuse1: fromRgb([0.498, 1, 0]),\n    Chartreuse2: fromRgb([0.464, 0.932, 0]),\n    Chartreuse3: fromRgb([0.4, 0.804, 0]),\n    Chartreuse4: fromRgb([0.27, 0.545, 0]),\n    Chocolate1: fromRgb([1, 0.498, 0.14]),\n    Chocolate2: fromRgb([0.932, 0.464, 0.13]),\n    Chocolate3: fromRgb([0.804, 0.4, 0.112]),\n    Chocolate4: fromRgb([0.545, 0.27, 0.075]),\n    Coral1: fromRgb([1, 0.448, 0.336]),\n    Coral2: fromRgb([0.932, 0.415, 0.312]),\n    Coral3: fromRgb([0.804, 0.356, 0.27]),\n    Coral4: fromRgb([0.545, 0.244, 0.185]),\n    Cornsilk1: fromRgb([1, 0.972, 0.864]),\n    Cornsilk2: fromRgb([0.932, 0.91, 0.804]),\n    Cornsilk3: fromRgb([0.804, 0.785, 0.694]),\n    Cornsilk4: fromRgb([0.545, 0.532, 0.47]),\n    Cyan1: fromRgb([0, 1, 1]),\n    Cyan2: fromRgb([0, 0.932, 0.932]),\n    Cyan3: fromRgb([0, 0.804, 0.804]),\n    Cyan4: fromRgb([0, 0.545, 0.545]),\n    DarkGoldenrod1: fromRgb([1, 0.725, 0.06]),\n    DarkGoldenrod2: fromRgb([0.932, 0.68, 0.055]),\n    DarkGoldenrod3: fromRgb([0.804, 0.585, 0.048]),\n    DarkGoldenrod4: fromRgb([0.545, 0.396, 0.03]),\n    DarkOliveGreen1: fromRgb([0.792, 1, 0.44]),\n    DarkOliveGreen2: fromRgb([0.736, 0.932, 0.408]),\n    DarkOliveGreen3: fromRgb([0.635, 0.804, 0.352]),\n    DarkOliveGreen4: fromRgb([0.43, 0.545, 0.24]),\n    DarkOrange1: fromRgb([1, 0.498, 0]),\n    DarkOrange2: fromRgb([0.932, 0.464, 0]),\n    DarkOrange3: fromRgb([0.804, 0.4, 0]),\n    DarkOrange4: fromRgb([0.545, 0.27, 0]),\n    DarkOrchid1: fromRgb([0.75, 0.244, 1]),\n    DarkOrchid2: fromRgb([0.698, 0.228, 0.932]),\n    DarkOrchid3: fromRgb([0.604, 0.196, 0.804]),\n    DarkOrchid4: fromRgb([0.408, 0.132, 0.545]),\n    DarkSeaGreen1: fromRgb([0.756, 1, 0.756]),\n    DarkSeaGreen2: fromRgb([0.705, 0.932, 0.705]),\n    DarkSeaGreen3: fromRgb([0.608, 0.804, 0.608]),\n    DarkSeaGreen4: fromRgb([0.41, 0.545, 0.41]),\n    DarkSlateGray1: fromRgb([0.592, 1, 1]),\n    DarkSlateGray2: fromRgb([0.552, 0.932, 0.932]),\n    DarkSlateGray3: fromRgb([0.475, 0.804, 0.804]),\n    DarkSlateGray4: fromRgb([0.32, 0.545, 0.545]),\n    DeepPink1: fromRgb([1, 0.08, 0.576]),\n    DeepPink2: fromRgb([0.932, 0.07, 0.536]),\n    DeepPink3: fromRgb([0.804, 0.064, 0.464]),\n    DeepPink4: fromRgb([0.545, 0.04, 0.312]),\n    DeepSkyBlue1: fromRgb([0, 0.75, 1]),\n    DeepSkyBlue2: fromRgb([0, 0.698, 0.932]),\n    DeepSkyBlue3: fromRgb([0, 0.604, 0.804]),\n    DeepSkyBlue4: fromRgb([0, 0.408, 0.545]),\n    DodgerBlue1: fromRgb([0.116, 0.565, 1]),\n    DodgerBlue2: fromRgb([0.11, 0.525, 0.932]),\n    DodgerBlue3: fromRgb([0.094, 0.455, 0.804]),\n    DodgerBlue4: fromRgb([0.064, 0.305, 0.545]),\n    Firebrick1: fromRgb([1, 0.19, 0.19]),\n    Firebrick2: fromRgb([0.932, 0.172, 0.172]),\n    Firebrick3: fromRgb([0.804, 0.15, 0.15]),\n    Firebrick4: fromRgb([0.545, 0.1, 0.1]),\n    Gold1: fromRgb([1, 0.844, 0]),\n    Gold2: fromRgb([0.932, 0.79, 0]),\n    Gold3: fromRgb([0.804, 0.68, 0]),\n    Gold4: fromRgb([0.545, 0.46, 0]),\n    Goldenrod1: fromRgb([1, 0.756, 0.145]),\n    Goldenrod2: fromRgb([0.932, 0.705, 0.132]),\n    Goldenrod3: fromRgb([0.804, 0.608, 0.112]),\n    Goldenrod4: fromRgb([0.545, 0.41, 0.08]),\n    Green1: fromRgb([0, 1, 0]),\n    Green2: fromRgb([0, 0.932, 0]),\n    Green3: fromRgb([0, 0.804, 0]),\n    Green4: fromRgb([0, 0.545, 0]),\n    Honeydew1: fromRgb([0.94, 1, 0.94]),\n    Honeydew2: fromRgb([0.88, 0.932, 0.88]),\n    Honeydew3: fromRgb([0.756, 0.804, 0.756]),\n    Honeydew4: fromRgb([0.512, 0.545, 0.512]),\n    HotPink1: fromRgb([1, 0.43, 0.705]),\n    HotPink2: fromRgb([0.932, 0.415, 0.655]),\n    HotPink3: fromRgb([0.804, 0.376, 0.565]),\n    HotPink4: fromRgb([0.545, 0.228, 0.385]),\n    IndianRed1: fromRgb([1, 0.415, 0.415]),\n    IndianRed2: fromRgb([0.932, 0.39, 0.39]),\n    IndianRed3: fromRgb([0.804, 0.332, 0.332]),\n    IndianRed4: fromRgb([0.545, 0.228, 0.228]),\n    Ivory1: fromRgb([1, 1, 0.94]),\n    Ivory2: fromRgb([0.932, 0.932, 0.88]),\n    Ivory3: fromRgb([0.804, 0.804, 0.756]),\n    Ivory4: fromRgb([0.545, 0.545, 0.512]),\n    Khaki1: fromRgb([1, 0.965, 0.56]),\n    Khaki2: fromRgb([0.932, 0.9, 0.52]),\n    Khaki3: fromRgb([0.804, 0.776, 0.45]),\n    Khaki4: fromRgb([0.545, 0.525, 0.305]),\n    LavenderBlush1: fromRgb([1, 0.94, 0.96]),\n    LavenderBlush2: fromRgb([0.932, 0.88, 0.898]),\n    LavenderBlush3: fromRgb([0.804, 0.756, 0.772]),\n    LavenderBlush4: fromRgb([0.545, 0.512, 0.525]),\n    LemonChiffon1: fromRgb([1, 0.98, 0.804]),\n    LemonChiffon2: fromRgb([0.932, 0.912, 0.75]),\n    LemonChiffon3: fromRgb([0.804, 0.79, 0.648]),\n    LemonChiffon4: fromRgb([0.545, 0.536, 0.44]),\n    LightBlue1: fromRgb([0.75, 0.936, 1]),\n    LightBlue2: fromRgb([0.698, 0.875, 0.932]),\n    LightBlue3: fromRgb([0.604, 0.752, 0.804]),\n    LightBlue4: fromRgb([0.408, 0.512, 0.545]),\n    LightCyan1: fromRgb([0.88, 1, 1]),\n    LightCyan2: fromRgb([0.82, 0.932, 0.932]),\n    LightCyan3: fromRgb([0.705, 0.804, 0.804]),\n    LightCyan4: fromRgb([0.48, 0.545, 0.545]),\n    LightGoldenrod1: fromRgb([1, 0.925, 0.545]),\n    LightGoldenrod2: fromRgb([0.932, 0.864, 0.51]),\n    LightGoldenrod3: fromRgb([0.804, 0.745, 0.44]),\n    LightGoldenrod4: fromRgb([0.545, 0.505, 0.298]),\n    LightPink1: fromRgb([1, 0.684, 0.725]),\n    LightPink2: fromRgb([0.932, 0.635, 0.68]),\n    LightPink3: fromRgb([0.804, 0.55, 0.585]),\n    LightPink4: fromRgb([0.545, 0.372, 0.396]),\n    LightSalmon1: fromRgb([1, 0.628, 0.48]),\n    LightSalmon2: fromRgb([0.932, 0.585, 0.448]),\n    LightSalmon3: fromRgb([0.804, 0.505, 0.385]),\n    LightSalmon4: fromRgb([0.545, 0.34, 0.26]),\n    LightSkyBlue1: fromRgb([0.69, 0.888, 1]),\n    LightSkyBlue2: fromRgb([0.644, 0.828, 0.932]),\n    LightSkyBlue3: fromRgb([0.552, 0.712, 0.804]),\n    LightSkyBlue4: fromRgb([0.376, 0.484, 0.545]),\n    LightSteelBlue1: fromRgb([0.792, 0.884, 1]),\n    LightSteelBlue2: fromRgb([0.736, 0.824, 0.932]),\n    LightSteelBlue3: fromRgb([0.635, 0.71, 0.804]),\n    LightSteelBlue4: fromRgb([0.43, 0.484, 0.545]),\n    LightYellow1: fromRgb([1, 1, 0.88]),\n    LightYellow2: fromRgb([0.932, 0.932, 0.82]),\n    LightYellow3: fromRgb([0.804, 0.804, 0.705]),\n    LightYellow4: fromRgb([0.545, 0.545, 0.48]),\n    Magenta1: fromRgb([1, 0, 1]),\n    Magenta2: fromRgb([0.932, 0, 0.932]),\n    Magenta3: fromRgb([0.804, 0, 0.804]),\n    Magenta4: fromRgb([0.545, 0, 0.545]),\n    Maroon1: fromRgb([1, 0.204, 0.7]),\n    Maroon2: fromRgb([0.932, 0.19, 0.655]),\n    Maroon3: fromRgb([0.804, 0.16, 0.565]),\n    Maroon4: fromRgb([0.545, 0.11, 0.385]),\n    MediumOrchid1: fromRgb([0.88, 0.4, 1]),\n    MediumOrchid2: fromRgb([0.82, 0.372, 0.932]),\n    MediumOrchid3: fromRgb([0.705, 0.32, 0.804]),\n    MediumOrchid4: fromRgb([0.48, 0.215, 0.545]),\n    MediumPurple1: fromRgb([0.67, 0.51, 1]),\n    MediumPurple2: fromRgb([0.624, 0.475, 0.932]),\n    MediumPurple3: fromRgb([0.536, 0.408, 0.804]),\n    MediumPurple4: fromRgb([0.365, 0.28, 0.545]),\n    MistyRose1: fromRgb([1, 0.894, 0.884]),\n    MistyRose2: fromRgb([0.932, 0.835, 0.824]),\n    MistyRose3: fromRgb([0.804, 0.716, 0.71]),\n    MistyRose4: fromRgb([0.545, 0.49, 0.484]),\n    NavajoWhite1: fromRgb([1, 0.87, 0.68]),\n    NavajoWhite2: fromRgb([0.932, 0.81, 0.63]),\n    NavajoWhite3: fromRgb([0.804, 0.7, 0.545]),\n    NavajoWhite4: fromRgb([0.545, 0.475, 0.37]),\n    OliveDrab1: fromRgb([0.752, 1, 0.244]),\n    OliveDrab2: fromRgb([0.7, 0.932, 0.228]),\n    OliveDrab3: fromRgb([0.604, 0.804, 0.196]),\n    OliveDrab4: fromRgb([0.41, 0.545, 0.132]),\n    Orange1: fromRgb([1, 0.648, 0]),\n    Orange2: fromRgb([0.932, 0.604, 0]),\n    Orange3: fromRgb([0.804, 0.52, 0]),\n    Orange4: fromRgb([0.545, 0.352, 0]),\n    OrangeRed1: fromRgb([1, 0.27, 0]),\n    OrangeRed2: fromRgb([0.932, 0.25, 0]),\n    OrangeRed3: fromRgb([0.804, 0.215, 0]),\n    OrangeRed4: fromRgb([0.545, 0.145, 0]),\n    Orchid1: fromRgb([1, 0.512, 0.98]),\n    Orchid2: fromRgb([0.932, 0.48, 0.912]),\n    Orchid3: fromRgb([0.804, 0.41, 0.79]),\n    Orchid4: fromRgb([0.545, 0.28, 0.536]),\n    PaleGreen1: fromRgb([0.604, 1, 0.604]),\n    PaleGreen2: fromRgb([0.565, 0.932, 0.565]),\n    PaleGreen3: fromRgb([0.488, 0.804, 0.488]),\n    PaleGreen4: fromRgb([0.33, 0.545, 0.33]),\n    PaleTurquoise1: fromRgb([0.732, 1, 1]),\n    PaleTurquoise2: fromRgb([0.684, 0.932, 0.932]),\n    PaleTurquoise3: fromRgb([0.59, 0.804, 0.804]),\n    PaleTurquoise4: fromRgb([0.4, 0.545, 0.545]),\n    PaleVioletRed1: fromRgb([1, 0.51, 0.67]),\n    PaleVioletRed2: fromRgb([0.932, 0.475, 0.624]),\n    PaleVioletRed3: fromRgb([0.804, 0.408, 0.536]),\n    PaleVioletRed4: fromRgb([0.545, 0.28, 0.365]),\n    PeachPuff1: fromRgb([1, 0.855, 0.725]),\n    PeachPuff2: fromRgb([0.932, 0.796, 0.68]),\n    PeachPuff3: fromRgb([0.804, 0.688, 0.585]),\n    PeachPuff4: fromRgb([0.545, 0.468, 0.396]),\n    Pink1: fromRgb([1, 0.71, 0.772]),\n    Pink2: fromRgb([0.932, 0.664, 0.72]),\n    Pink3: fromRgb([0.804, 0.57, 0.62]),\n    Pink4: fromRgb([0.545, 0.39, 0.424]),\n    Plum1: fromRgb([1, 0.732, 1]),\n    Plum2: fromRgb([0.932, 0.684, 0.932]),\n    Plum3: fromRgb([0.804, 0.59, 0.804]),\n    Plum4: fromRgb([0.545, 0.4, 0.545]),\n    Purple1: fromRgb([0.608, 0.19, 1]),\n    Purple2: fromRgb([0.57, 0.172, 0.932]),\n    Purple3: fromRgb([0.49, 0.15, 0.804]),\n    Purple4: fromRgb([0.332, 0.1, 0.545]),\n    Red1: fromRgb([1, 0, 0]),\n    Red2: fromRgb([0.932, 0, 0]),\n    Red3: fromRgb([0.804, 0, 0]),\n    Red4: fromRgb([0.545, 0, 0]),\n    RosyBrown1: fromRgb([1, 0.756, 0.756]),\n    RosyBrown2: fromRgb([0.932, 0.705, 0.705]),\n    RosyBrown3: fromRgb([0.804, 0.608, 0.608]),\n    RosyBrown4: fromRgb([0.545, 0.41, 0.41]),\n    RoyalBlue1: fromRgb([0.284, 0.464, 1]),\n    RoyalBlue2: fromRgb([0.264, 0.43, 0.932]),\n    RoyalBlue3: fromRgb([0.228, 0.372, 0.804]),\n    RoyalBlue4: fromRgb([0.152, 0.25, 0.545]),\n    Salmon1: fromRgb([1, 0.55, 0.41]),\n    Salmon2: fromRgb([0.932, 0.51, 0.385]),\n    Salmon3: fromRgb([0.804, 0.44, 0.33]),\n    Salmon4: fromRgb([0.545, 0.298, 0.224]),\n    SeaGreen1: fromRgb([0.33, 1, 0.624]),\n    SeaGreen2: fromRgb([0.305, 0.932, 0.58]),\n    SeaGreen3: fromRgb([0.264, 0.804, 0.5]),\n    SeaGreen4: fromRgb([0.18, 0.545, 0.34]),\n    Seashell1: fromRgb([1, 0.96, 0.932]),\n    Seashell2: fromRgb([0.932, 0.898, 0.87]),\n    Seashell3: fromRgb([0.804, 0.772, 0.75]),\n    Seashell4: fromRgb([0.545, 0.525, 0.51]),\n    Sienna1: fromRgb([1, 0.51, 0.28]),\n    Sienna2: fromRgb([0.932, 0.475, 0.26]),\n    Sienna3: fromRgb([0.804, 0.408, 0.224]),\n    Sienna4: fromRgb([0.545, 0.28, 0.15]),\n    SkyBlue1: fromRgb([0.53, 0.808, 1]),\n    SkyBlue2: fromRgb([0.494, 0.752, 0.932]),\n    SkyBlue3: fromRgb([0.424, 0.65, 0.804]),\n    SkyBlue4: fromRgb([0.29, 0.44, 0.545]),\n    SlateBlue1: fromRgb([0.512, 0.435, 1]),\n    SlateBlue2: fromRgb([0.48, 0.404, 0.932]),\n    SlateBlue3: fromRgb([0.41, 0.35, 0.804]),\n    SlateBlue4: fromRgb([0.28, 0.235, 0.545]),\n    SlateGray1: fromRgb([0.776, 0.888, 1]),\n    SlateGray2: fromRgb([0.725, 0.828, 0.932]),\n    SlateGray3: fromRgb([0.624, 0.712, 0.804]),\n    SlateGray4: fromRgb([0.424, 0.484, 0.545]),\n    Snow1: fromRgb([1, 0.98, 0.98]),\n    Snow2: fromRgb([0.932, 0.912, 0.912]),\n    Snow3: fromRgb([0.804, 0.79, 0.79]),\n    Snow4: fromRgb([0.545, 0.536, 0.536]),\n    SpringGreen1: fromRgb([0, 1, 0.498]),\n    SpringGreen2: fromRgb([0, 0.932, 0.464]),\n    SpringGreen3: fromRgb([0, 0.804, 0.4]),\n    SpringGreen4: fromRgb([0, 0.545, 0.27]),\n    SteelBlue1: fromRgb([0.39, 0.72, 1]),\n    SteelBlue2: fromRgb([0.36, 0.675, 0.932]),\n    SteelBlue3: fromRgb([0.31, 0.58, 0.804]),\n    SteelBlue4: fromRgb([0.21, 0.392, 0.545]),\n    Tan1: fromRgb([1, 0.648, 0.31]),\n    Tan2: fromRgb([0.932, 0.604, 0.288]),\n    Tan3: fromRgb([0.804, 0.52, 0.248]),\n    Tan4: fromRgb([0.545, 0.352, 0.17]),\n    Thistle1: fromRgb([1, 0.884, 1]),\n    Thistle2: fromRgb([0.932, 0.824, 0.932]),\n    Thistle3: fromRgb([0.804, 0.71, 0.804]),\n    Thistle4: fromRgb([0.545, 0.484, 0.545]),\n    Tomato1: fromRgb([1, 0.39, 0.28]),\n    Tomato2: fromRgb([0.932, 0.36, 0.26]),\n    Tomato3: fromRgb([0.804, 0.31, 0.224]),\n    Tomato4: fromRgb([0.545, 0.21, 0.15]),\n    Turquoise1: fromRgb([0, 0.96, 1]),\n    Turquoise2: fromRgb([0, 0.898, 0.932]),\n    Turquoise3: fromRgb([0, 0.772, 0.804]),\n    Turquoise4: fromRgb([0, 0.525, 0.545]),\n    VioletRed1: fromRgb([1, 0.244, 0.59]),\n    VioletRed2: fromRgb([0.932, 0.228, 0.55]),\n    VioletRed3: fromRgb([0.804, 0.196, 0.47]),\n    VioletRed4: fromRgb([0.545, 0.132, 0.32]),\n    Wheat1: fromRgb([1, 0.905, 0.73]),\n    Wheat2: fromRgb([0.932, 0.848, 0.684]),\n    Wheat3: fromRgb([0.804, 0.73, 0.59]),\n    Wheat4: fromRgb([0.545, 0.494, 0.4]),\n    Yellow1: fromRgb([1, 1, 0]),\n    Yellow2: fromRgb([0.932, 0.932, 0]),\n    Yellow3: fromRgb([0.804, 0.804, 0]),\n    Yellow4: fromRgb([0.545, 0.545, 0]),\n    Gray0: fromRgb([0.745, 0.745, 0.745]),\n    Green0: fromRgb([0, 1, 0]),\n    Grey0: fromRgb([0.745, 0.745, 0.745]),\n    Maroon0: fromRgb([0.69, 0.19, 0.376]),\n    Purple0: fromRgb([0.628, 0.125, 0.94]),\n};\n", "import { XColorPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nimport * as XColorSpec from \"./types\";\n\nconst parseCache: Record<string, XColorSpec.Ast> = {};\n\n/**\n * Parse an `xparse` argument specification string to an AST.\n * This function caches results. Don't mutate the returned AST!\n *\n * @param {string} [str=\"\"] - LaTeX string input\n * @returns - AST for LaTeX string\n */\nexport function parse(str = \"\"): XColorSpec.Ast {\n    parseCache[str] =\n        parseCache[str] || (XColorPegParser.parse(str) as XColorSpec.Ast);\n    return parseCache[str];\n}\n", "import * as XColorSpec from \"./types\";\n\n/**\n * Print an `xcolor` argument specification AST to a string.\n */\nexport function printRaw(node: XColorSpec.Ast, root = false): string {\n    if (typeof node === \"string\") {\n        return node;\n    }\n\n    if (Array.isArray(node)) {\n        const sepToken = root ? \" \" : \"\";\n        return node.map((tok) => printRaw(tok)).join(sepToken);\n    }\n\n    if (node.type === \"invalid_spec\") {\n        return node.content;\n    }\n\n    switch (node.type) {\n        case \"postfix\":\n            if (node.plusses != null) {\n                return `!!${node.plusses}`;\n            } else {\n                return `!![${node.num}]`;\n            }\n        case \"complete_mix\":\n            return `!${node.mix_percent}!${node.name}`;\n        case \"partial_mix\":\n            return `!${node.mix_percent}`;\n        case \"expr\":\n            return `${node.prefix || \"\"}${node.name}${node.mix_expr\n                .map((mix) => printRaw(mix))\n                .join(\"\")}${node.postfix ? printRaw(node.postfix) : \"\"}`;\n        case \"weighted_expr\":\n            return `${printRaw(node.color)},${node.weight}`;\n        case \"extended_expr\":\n            let prefix = node.core_model;\n            if (node.div) {\n                prefix += `,${node.div}`;\n            }\n            return `${prefix}:${node.expressions\n                .map((expr) => printRaw(expr))\n                .join(\";\")}`;\n        case \"function\":\n            return `>${node.name},${node.args.map((a) => \"\" + a).join(\",\")}`;\n        case \"color\":\n            return (\n                printRaw(node.color) +\n                node.functions.map((f) => printRaw(f)).join(\"\")\n            );\n\n        default:\n            console.warn(\n                `Unknown node type \"${(node as any).type}\" for node`,\n                node\n            );\n            return \"\";\n    }\n}\n", "import * as Ast from \"@unified-latex/unified-latex-types\";\nimport { getArgsContent } from \"@unified-latex/unified-latex-util-arguments\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { xcolorColorToHex } from \"./xcolor\";\nimport { structuredClone } from \"@unified-latex/structured-clone\";\nimport { deleteComments } from \"@unified-latex/unified-latex-util-comments\";\n\n/**\n * Compute the hex representation of a color specified by an xcolor color command.\n * For example `\\color[rgb]{1 .5 .5}` or `\\textcolor{red}{foo}`. If the color cannot be parsed,\n * `null` is returned for the hex value. In all cases a css variable name (prefixed with \"--\"\")\n * is returned. This can be used to set up CSS for custom colors.\n */\nexport function xcolorMacroToHex(node: Ast.Macro): {\n    hex: string | null;\n    cssVarName: string;\n} {\n    // We do some destructive operations on the node, so clone it first.\n    node = structuredClone(node);\n    deleteComments(node);\n\n    // We assume the node has signature \"o m\" where o is the model and\n    // m is the color spec.\n\n    const args = getArgsContent(node);\n    const model = args[0] && printRaw(args[0]);\n    const colorStr = printRaw(args[1] || []);\n    let hex: string | null = null;\n    try {\n        hex = xcolorColorToHex(colorStr, model);\n    } catch (e) {}\n\n    const cssVarName = \"--\" + colorStr.replace(/[^a-zA-Z0-9-_]/g, \"-\");\n\n    return { hex, cssVarName };\n}\n", "// @ts-nocheck\n\n// globalThis polyfill from https://mathiasbynens.be/notes/globalthis\n(function () {\n    if (typeof globalThis === \"object\") return;\n    Object.defineProperty(Object.prototype, \"__magic__\", {\n        get: function () {\n            return this;\n        },\n        configurable: true, // This makes it possible to `delete` the getter later.\n    });\n    __magic__.globalThis = __magic__; // lolwat\n    delete Object.prototype.__magic__;\n})();\n\nconst clone =\n    typeof globalThis.structuredClone === \"function\"\n        ? globalThis.structuredClone\n        : (obj: any) => JSON.parse(JSON.stringify(obj));\n\n/**\n * Wrapper around the built-in structured clone. Uses `JSON.parse(JSON.stringify(...))`\n * as a fallback.\n */\nexport function structuredClone<T>(obj: T): T {\n    return clone(obj);\n}\n", "import { arg } from \"@unified-latex/unified-latex-builder\";\nimport * as Ast from \"@unified-latex/unified-latex-types\";\n\n/**\n * Create a `\\textcolor` macro. Color arguments are taken from `origMacro`.\n */\nexport function colorToTextcolorMacro(\n    content: Ast.Node | Ast.Node[],\n    origMacro: Ast.Macro\n): Ast.Macro {\n    if (!Array.isArray(content)) {\n        content = [content];\n    }\n    // Signature of \\color is \"o m\".\n    // We want to carry through the same arguments\n    const args = (\n        origMacro.args\n            ? origMacro.args\n            : [arg([], { closeMark: \"\", openMark: \"\" }), arg([])]\n    ).concat(arg(content));\n\n    return {\n        type: \"macro\",\n        content: \"textcolor\",\n        args,\n        _renderInfo: { inParMode: true },\n    };\n}"],
  "mappings": "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",
  "names": []
}
