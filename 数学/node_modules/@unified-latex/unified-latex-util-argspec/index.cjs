var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var unified_latex_util_argspec_exports = {};
__export(unified_latex_util_argspec_exports, {
  ArgSpecAst: () => argspec_types_exports,
  parse: () => parse,
  printRaw: () => printRaw
});
module.exports = __toCommonJS(unified_latex_util_argspec_exports);

// libs/argspec-parser.ts
var import_unified_latex_util_pegjs = require("@unified-latex/unified-latex-util-pegjs");
function getDecorators(node) {
  let ret = "";
  if (node.noLeadingWhitespace) {
    ret += "!";
  }
  return ret;
}
function printRaw(node, root = false) {
  if (typeof node === "string") {
    return node;
  }
  if (Array.isArray(node)) {
    const sepToken = root ? " " : "";
    return node.map((tok) => printRaw(tok)).join(sepToken);
  }
  const decorators = getDecorators(node);
  const defaultArg = node.defaultArg ? printRaw(node.defaultArg) : "";
  let spec = decorators;
  switch (node.type) {
    case "body":
      return decorators + "b";
    case "optionalStar":
      return decorators + "s";
    case "optionalToken":
      return spec + "t" + node.token;
    case "optional":
      if (node.openBrace === "[" && node.closeBrace === "]") {
        spec += node.defaultArg ? "O" : "o";
      } else {
        spec += node.defaultArg ? "D" : "d";
        spec += node.openBrace + node.closeBrace;
      }
      return spec + defaultArg;
    case "mandatory":
      if (node.openBrace === "{" && node.closeBrace === "}") {
        spec += "m";
      } else {
        spec += node.defaultArg ? "R" : "r";
        spec += node.openBrace + node.closeBrace;
      }
      return spec + defaultArg;
    case "embellishment":
      spec += node.defaultArg ? "E" : "e";
      return spec + "{" + printRaw(node.embellishmentTokens) + "}" + defaultArg;
    case "verbatim":
      return spec + "v" + node.openBrace;
    case "group":
      return spec + "{" + printRaw(node.content) + "}";
    default:
      console.warn(`Unknown node type "${node.type}" for node`, node);
      return "";
  }
}
var parseCache = {};
function parse(str = "") {
  parseCache[str] = parseCache[str] || import_unified_latex_util_pegjs.ArgSpecPegParser.parse(str);
  return parseCache[str];
}

// libs/argspec-types.ts
var argspec_types_exports = {};
//# sourceMappingURL=index.cjs.map
