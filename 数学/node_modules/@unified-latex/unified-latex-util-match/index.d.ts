import { match } from "./libs/match";
export { match };
export declare const anyEnvironment: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Environment, anyMacro: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Macro, anyString: (node: any) => node is import("@unified-latex/unified-latex-types/dist").String, argument: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Argument, blankArgument: (node: any) => boolean, comment: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Comment, environment: (node: any, envName?: string | undefined) => node is import("@unified-latex/unified-latex-types/dist").Environment, group: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Group, macro: (node: any, macroName?: string | undefined) => node is import("@unified-latex/unified-latex-types/dist").Macro, math: (node: any) => node is import("@unified-latex/unified-latex-types/dist").InlineMath | import("@unified-latex/unified-latex-types/dist").DisplayMath, parbreak: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Parbreak, string: (node: any, value?: string | undefined) => node is import("@unified-latex/unified-latex-types/dist").String, whitespace: (node: any) => node is import("@unified-latex/unified-latex-types/dist").Whitespace;
/**
 * ## What is this?
 *
 * Functions to match different `Ast.Node` types in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you need a type-guard to ensure a node is of a certain type; for example, during a call to `unified-latex-until-visit`.
 */
//# sourceMappingURL=index.d.ts.map