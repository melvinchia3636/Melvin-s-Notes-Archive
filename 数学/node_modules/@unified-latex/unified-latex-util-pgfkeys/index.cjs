var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var unified_latex_util_pgfkeys_exports = {};
__export(unified_latex_util_pgfkeys_exports, {
  createMatchers: () => createMatchers,
  parsePgfkeys: () => parsePgfkeys,
  pgfkeysArgToObject: () => pgfkeysArgToObject
});
module.exports = __toCommonJS(unified_latex_util_pgfkeys_exports);

// libs/pgfkeys-parser.ts
var import_unified_latex_util_pegjs = require("@unified-latex/unified-latex-util-pegjs");
var import_unified_latex_util_match = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_pegjs2 = require("@unified-latex/unified-latex-util-pegjs");
function createMatchers() {
  return {
    isComma: (node) => import_unified_latex_util_match.match.string(node, ","),
    isEquals: (node) => import_unified_latex_util_match.match.string(node, "="),
    isWhitespace: (node) => import_unified_latex_util_match.match.whitespace(node),
    isParbreak: (node) => import_unified_latex_util_match.match.parbreak(node),
    isSameLineComment: (node) => import_unified_latex_util_match.match.comment(node) && node.sameline,
    isOwnLineComment: (node) => import_unified_latex_util_match.match.comment(node) && !node.sameline
  };
}
function parsePgfkeys(ast) {
  if (!Array.isArray(ast)) {
    throw new Error("You must pass an array of nodes");
  }
  ast = (0, import_unified_latex_util_pegjs2.decorateArrayForPegjs)([...ast]);
  return import_unified_latex_util_pegjs.PgfkeysPegParser.parse(ast, createMatchers());
}

// libs/pgfkeys-to-object.ts
var import_unified_latex_util_match2 = require("@unified-latex/unified-latex-util-match");
var import_unified_latex_util_print_raw = require("@unified-latex/unified-latex-util-print-raw");
function pgfkeysArgToObject(arg) {
  function parseFront(nodes) {
    return (0, import_unified_latex_util_print_raw.printRaw)(nodes);
  }
  function parseBack(nodes) {
    if (!nodes) {
      return [];
    }
    if (nodes.length === 1 && import_unified_latex_util_match2.match.group(nodes[0])) {
      return nodes[0].content;
    }
    return nodes;
  }
  let nodeList;
  if (import_unified_latex_util_match2.match.argument(arg)) {
    nodeList = arg.content;
  } else {
    nodeList = arg;
  }
  const parsedArgs = parsePgfkeys(nodeList);
  return Object.fromEntries(parsedArgs.filter((part) => part.itemParts).map((part) => [
    parseFront(part.itemParts[0]),
    parseBack(part.itemParts[1])
  ]));
}
//# sourceMappingURL=index.cjs.map
