var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

// ../../node_modules/prettier/doc.js
var require_doc = __commonJS({
  "../../node_modules/prettier/doc.js"(exports, module) {
    (function(factory) {
      if (typeof exports === "object" && typeof module === "object") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        var root = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : this || {};
        root.doc = factory();
      }
    })(function() {
      "use strict";
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __commonJS2 = (cb, mod) => function __require() {
        return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
      };
      var require_doc2 = __commonJS2({
        "dist/doc.js"(exports2, module2) {
          var __getOwnPropNames22 = Object.getOwnPropertyNames;
          var __esm = (fn, res) => function __init() {
            return fn && (res = (0, fn[__getOwnPropNames22(fn)[0]])(fn = 0)), res;
          };
          var __commonJS22 = (cb, mod) => function __require() {
            return mod || (0, cb[__getOwnPropNames22(cb)[0]])((mod = {
              exports: {}
            }).exports, mod), mod.exports;
          };
          var init_define_process = __esm({
            "<define:process>"() {
            }
          });
          var require_doc_builders = __commonJS22({
            "src/document/doc-builders.js"(exports22, module22) {
              "use strict";
              init_define_process();
              function concat(parts) {
                if (false) {
                  for (const part of parts) {
                    assertDoc(part);
                  }
                }
                return {
                  type: "concat",
                  parts
                };
              }
              function indent2(contents) {
                if (false) {
                  assertDoc(contents);
                }
                return {
                  type: "indent",
                  contents
                };
              }
              function align(widthOrString, contents) {
                if (false) {
                  assertDoc(contents);
                }
                return {
                  type: "align",
                  contents,
                  n: widthOrString
                };
              }
              function group2(contents) {
                let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (false) {
                  assertDoc(contents);
                }
                return {
                  type: "group",
                  id: opts.id,
                  contents,
                  break: Boolean(opts.shouldBreak),
                  expandedStates: opts.expandedStates
                };
              }
              function dedentToRoot(contents) {
                return align(Number.NEGATIVE_INFINITY, contents);
              }
              function markAsRoot2(contents) {
                return align({
                  type: "root"
                }, contents);
              }
              function dedent(contents) {
                return align(-1, contents);
              }
              function conditionalGroup(states, opts) {
                return group2(states[0], Object.assign(Object.assign({}, opts), {}, {
                  expandedStates: states
                }));
              }
              function fill2(parts) {
                if (false) {
                  for (const part of parts) {
                    assertDoc(part);
                  }
                }
                return {
                  type: "fill",
                  parts
                };
              }
              function ifBreak3(breakContents, flatContents) {
                let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                if (false) {
                  if (breakContents) {
                    assertDoc(breakContents);
                  }
                  if (flatContents) {
                    assertDoc(flatContents);
                  }
                }
                return {
                  type: "if-break",
                  breakContents,
                  flatContents,
                  groupId: opts.groupId
                };
              }
              function indentIfBreak(contents, opts) {
                return {
                  type: "indent-if-break",
                  contents,
                  groupId: opts.groupId,
                  negate: opts.negate
                };
              }
              function lineSuffix2(contents) {
                if (false) {
                  assertDoc(contents);
                }
                return {
                  type: "line-suffix",
                  contents
                };
              }
              var lineSuffixBoundary2 = {
                type: "line-suffix-boundary"
              };
              var breakParent2 = {
                type: "break-parent"
              };
              var trim3 = {
                type: "trim"
              };
              var hardlineWithoutBreakParent = {
                type: "line",
                hard: true
              };
              var literallineWithoutBreakParent = {
                type: "line",
                hard: true,
                literal: true
              };
              var line4 = {
                type: "line"
              };
              var softline4 = {
                type: "line",
                soft: true
              };
              var hardline2 = concat([hardlineWithoutBreakParent, breakParent2]);
              var literalline = concat([literallineWithoutBreakParent, breakParent2]);
              var cursor = {
                type: "cursor",
                placeholder: Symbol("cursor")
              };
              function join2(sep, arr) {
                const res = [];
                for (let i = 0; i < arr.length; i++) {
                  if (i !== 0) {
                    res.push(sep);
                  }
                  res.push(arr[i]);
                }
                return concat(res);
              }
              function addAlignmentToDoc(doc, size, tabWidth) {
                let aligned = doc;
                if (size > 0) {
                  for (let i = 0; i < Math.floor(size / tabWidth); ++i) {
                    aligned = indent2(aligned);
                  }
                  aligned = align(size % tabWidth, aligned);
                  aligned = align(Number.NEGATIVE_INFINITY, aligned);
                }
                return aligned;
              }
              function label(label2, contents) {
                return {
                  type: "label",
                  label: label2,
                  contents
                };
              }
              module22.exports = {
                concat,
                join: join2,
                line: line4,
                softline: softline4,
                hardline: hardline2,
                literalline,
                group: group2,
                conditionalGroup,
                fill: fill2,
                lineSuffix: lineSuffix2,
                lineSuffixBoundary: lineSuffixBoundary2,
                cursor,
                breakParent: breakParent2,
                ifBreak: ifBreak3,
                trim: trim3,
                indent: indent2,
                indentIfBreak,
                align,
                addAlignmentToDoc,
                markAsRoot: markAsRoot2,
                dedentToRoot,
                dedent,
                hardlineWithoutBreakParent,
                literallineWithoutBreakParent,
                label
              };
            }
          });
          var require_end_of_line = __commonJS22({
            "src/common/end-of-line.js"(exports22, module22) {
              "use strict";
              init_define_process();
              function guessEndOfLine(text) {
                const index = text.indexOf("\r");
                if (index >= 0) {
                  return text.charAt(index + 1) === "\n" ? "crlf" : "cr";
                }
                return "lf";
              }
              function convertEndOfLineToChars(value) {
                switch (value) {
                  case "cr":
                    return "\r";
                  case "crlf":
                    return "\r\n";
                  default:
                    return "\n";
                }
              }
              function countEndOfLineChars(text, eol) {
                let regex;
                switch (eol) {
                  case "\n":
                    regex = /\n/g;
                    break;
                  case "\r":
                    regex = /\r/g;
                    break;
                  case "\r\n":
                    regex = /\r\n/g;
                    break;
                  default:
                    throw new Error('Unexpected "eol" '.concat(JSON.stringify(eol), "."));
                }
                const endOfLines = text.match(regex);
                return endOfLines ? endOfLines.length : 0;
              }
              function normalizeEndOfLine(text) {
                return text.replace(/\r\n?/g, "\n");
              }
              module22.exports = {
                guessEndOfLine,
                convertEndOfLineToChars,
                countEndOfLineChars,
                normalizeEndOfLine
              };
            }
          });
          var require_get_last = __commonJS22({
            "src/utils/get-last.js"(exports22, module22) {
              "use strict";
              init_define_process();
              var getLast = (arr) => arr[arr.length - 1];
              module22.exports = getLast;
            }
          });
          var require_string_width = __commonJS22({
            "vendors/string-width.js"(exports22, module22) {
              init_define_process();
              var __create2 = Object.create;
              var __defProp2 = Object.defineProperty;
              var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
              var __getOwnPropNames222 = Object.getOwnPropertyNames;
              var __getProtoOf2 = Object.getPrototypeOf;
              var __hasOwnProp2 = Object.prototype.hasOwnProperty;
              var __commonJS222 = (cb, mod) => function __require() {
                return mod || (0, cb[__getOwnPropNames222(cb)[0]])((mod = {
                  exports: {}
                }).exports, mod), mod.exports;
              };
              var __export = (target, all) => {
                for (var name in all)
                  __defProp2(target, name, {
                    get: all[name],
                    enumerable: true
                  });
              };
              var __copyProps2 = (to, from, except, desc) => {
                if (from && typeof from === "object" || typeof from === "function") {
                  for (let key of __getOwnPropNames222(from))
                    if (!__hasOwnProp2.call(to, key) && key !== except)
                      __defProp2(to, key, {
                        get: () => from[key],
                        enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable
                      });
                }
                return to;
              };
              var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", {
                value: mod,
                enumerable: true
              }) : target, mod));
              var __toCommonJS = (mod) => __copyProps2(__defProp2({}, "__esModule", {
                value: true
              }), mod);
              var require_emoji_regex = __commonJS222({
                "node_modules/emoji-regex/index.js"(exports3, module222) {
                  "use strict";
                  module222.exports = function() {
                    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
                  };
                }
              });
              var string_width_exports = {};
              __export(string_width_exports, {
                default: () => stringWidth
              });
              module22.exports = __toCommonJS(string_width_exports);
              function ansiRegex() {
                let {
                  onlyFirst = false
                } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                const pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
                return new RegExp(pattern, onlyFirst ? void 0 : "g");
              }
              function stripAnsi(string) {
                if (typeof string !== "string") {
                  throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
                }
                return string.replace(ansiRegex(), "");
              }
              function isFullwidthCodePoint(codePoint) {
                if (!Number.isInteger(codePoint)) {
                  return false;
                }
                return codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141);
              }
              var import_emoji_regex = __toESM2(require_emoji_regex(), 1);
              function stringWidth(string) {
                if (typeof string !== "string" || string.length === 0) {
                  return 0;
                }
                string = stripAnsi(string);
                if (string.length === 0) {
                  return 0;
                }
                string = string.replace((0, import_emoji_regex.default)(), "  ");
                let width = 0;
                for (let index = 0; index < string.length; index++) {
                  const codePoint = string.codePointAt(index);
                  if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {
                    continue;
                  }
                  if (codePoint >= 768 && codePoint <= 879) {
                    continue;
                  }
                  if (codePoint > 65535) {
                    index++;
                  }
                  width += isFullwidthCodePoint(codePoint) ? 2 : 1;
                }
                return width;
              }
            }
          });
          var require_get_string_width = __commonJS22({
            "src/utils/get-string-width.js"(exports22, module22) {
              "use strict";
              init_define_process();
              var stringWidth = require_string_width().default;
              var notAsciiRegex = /[^\x20-\x7F]/;
              function getStringWidth(text) {
                if (!text) {
                  return 0;
                }
                if (!notAsciiRegex.test(text)) {
                  return text.length;
                }
                return stringWidth(text);
              }
              module22.exports = getStringWidth;
            }
          });
          var require_doc_utils = __commonJS22({
            "src/document/doc-utils.js"(exports22, module22) {
              "use strict";
              init_define_process();
              var getLast = require_get_last();
              var {
                literalline,
                join: join2
              } = require_doc_builders();
              var isConcat = (doc) => Array.isArray(doc) || doc && doc.type === "concat";
              var getDocParts = (doc) => {
                if (Array.isArray(doc)) {
                  return doc;
                }
                if (doc.type !== "concat" && doc.type !== "fill") {
                  throw new Error("Expect doc type to be `concat` or `fill`.");
                }
                return doc.parts;
              };
              var traverseDocOnExitStackMarker = {};
              function traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {
                const docsStack = [doc];
                while (docsStack.length > 0) {
                  const doc2 = docsStack.pop();
                  if (doc2 === traverseDocOnExitStackMarker) {
                    onExit(docsStack.pop());
                    continue;
                  }
                  if (onExit) {
                    docsStack.push(doc2, traverseDocOnExitStackMarker);
                  }
                  if (!onEnter || onEnter(doc2) !== false) {
                    if (isConcat(doc2) || doc2.type === "fill") {
                      const parts = getDocParts(doc2);
                      for (let ic = parts.length, i = ic - 1; i >= 0; --i) {
                        docsStack.push(parts[i]);
                      }
                    } else if (doc2.type === "if-break") {
                      if (doc2.flatContents) {
                        docsStack.push(doc2.flatContents);
                      }
                      if (doc2.breakContents) {
                        docsStack.push(doc2.breakContents);
                      }
                    } else if (doc2.type === "group" && doc2.expandedStates) {
                      if (shouldTraverseConditionalGroups) {
                        for (let ic = doc2.expandedStates.length, i = ic - 1; i >= 0; --i) {
                          docsStack.push(doc2.expandedStates[i]);
                        }
                      } else {
                        docsStack.push(doc2.contents);
                      }
                    } else if (doc2.contents) {
                      docsStack.push(doc2.contents);
                    }
                  }
                }
              }
              function mapDoc(doc, cb) {
                const mapped = /* @__PURE__ */ new Map();
                return rec(doc);
                function rec(doc2) {
                  if (mapped.has(doc2)) {
                    return mapped.get(doc2);
                  }
                  const result = process2(doc2);
                  mapped.set(doc2, result);
                  return result;
                }
                function process2(doc2) {
                  if (Array.isArray(doc2)) {
                    return cb(doc2.map(rec));
                  }
                  if (doc2.type === "concat" || doc2.type === "fill") {
                    const parts = doc2.parts.map(rec);
                    return cb(Object.assign(Object.assign({}, doc2), {}, {
                      parts
                    }));
                  }
                  if (doc2.type === "if-break") {
                    const breakContents = doc2.breakContents && rec(doc2.breakContents);
                    const flatContents = doc2.flatContents && rec(doc2.flatContents);
                    return cb(Object.assign(Object.assign({}, doc2), {}, {
                      breakContents,
                      flatContents
                    }));
                  }
                  if (doc2.type === "group" && doc2.expandedStates) {
                    const expandedStates = doc2.expandedStates.map(rec);
                    const contents = expandedStates[0];
                    return cb(Object.assign(Object.assign({}, doc2), {}, {
                      contents,
                      expandedStates
                    }));
                  }
                  if (doc2.contents) {
                    const contents = rec(doc2.contents);
                    return cb(Object.assign(Object.assign({}, doc2), {}, {
                      contents
                    }));
                  }
                  return cb(doc2);
                }
              }
              function findInDoc(doc, fn, defaultValue) {
                let result = defaultValue;
                let hasStopped = false;
                function findInDocOnEnterFn(doc2) {
                  const maybeResult = fn(doc2);
                  if (maybeResult !== void 0) {
                    hasStopped = true;
                    result = maybeResult;
                  }
                  if (hasStopped) {
                    return false;
                  }
                }
                traverseDoc(doc, findInDocOnEnterFn);
                return result;
              }
              function willBreakFn(doc) {
                if (doc.type === "group" && doc.break) {
                  return true;
                }
                if (doc.type === "line" && doc.hard) {
                  return true;
                }
                if (doc.type === "break-parent") {
                  return true;
                }
              }
              function willBreak(doc) {
                return findInDoc(doc, willBreakFn, false);
              }
              function breakParentGroup(groupStack) {
                if (groupStack.length > 0) {
                  const parentGroup = getLast(groupStack);
                  if (!parentGroup.expandedStates && !parentGroup.break) {
                    parentGroup.break = "propagated";
                  }
                }
                return null;
              }
              function propagateBreaks(doc) {
                const alreadyVisitedSet = /* @__PURE__ */ new Set();
                const groupStack = [];
                function propagateBreaksOnEnterFn(doc2) {
                  if (doc2.type === "break-parent") {
                    breakParentGroup(groupStack);
                  }
                  if (doc2.type === "group") {
                    groupStack.push(doc2);
                    if (alreadyVisitedSet.has(doc2)) {
                      return false;
                    }
                    alreadyVisitedSet.add(doc2);
                  }
                }
                function propagateBreaksOnExitFn(doc2) {
                  if (doc2.type === "group") {
                    const group2 = groupStack.pop();
                    if (group2.break) {
                      breakParentGroup(groupStack);
                    }
                  }
                }
                traverseDoc(doc, propagateBreaksOnEnterFn, propagateBreaksOnExitFn, true);
              }
              function removeLinesFn(doc) {
                if (doc.type === "line" && !doc.hard) {
                  return doc.soft ? "" : " ";
                }
                if (doc.type === "if-break") {
                  return doc.flatContents || "";
                }
                return doc;
              }
              function removeLines(doc) {
                return mapDoc(doc, removeLinesFn);
              }
              var isHardline = (doc, nextDoc) => doc && doc.type === "line" && doc.hard && nextDoc && nextDoc.type === "break-parent";
              function stripDocTrailingHardlineFromDoc(doc) {
                if (!doc) {
                  return doc;
                }
                if (isConcat(doc) || doc.type === "fill") {
                  const parts = getDocParts(doc);
                  while (parts.length > 1 && isHardline(...parts.slice(-2))) {
                    parts.length -= 2;
                  }
                  if (parts.length > 0) {
                    const lastPart = stripDocTrailingHardlineFromDoc(getLast(parts));
                    parts[parts.length - 1] = lastPart;
                  }
                  return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {
                    parts
                  });
                }
                switch (doc.type) {
                  case "align":
                  case "indent":
                  case "indent-if-break":
                  case "group":
                  case "line-suffix":
                  case "label": {
                    const contents = stripDocTrailingHardlineFromDoc(doc.contents);
                    return Object.assign(Object.assign({}, doc), {}, {
                      contents
                    });
                  }
                  case "if-break": {
                    const breakContents = stripDocTrailingHardlineFromDoc(doc.breakContents);
                    const flatContents = stripDocTrailingHardlineFromDoc(doc.flatContents);
                    return Object.assign(Object.assign({}, doc), {}, {
                      breakContents,
                      flatContents
                    });
                  }
                }
                return doc;
              }
              function stripTrailingHardline(doc) {
                return stripDocTrailingHardlineFromDoc(cleanDoc(doc));
              }
              function cleanDocFn(doc) {
                switch (doc.type) {
                  case "fill":
                    if (doc.parts.every((part) => part === "")) {
                      return "";
                    }
                    break;
                  case "group":
                    if (!doc.contents && !doc.id && !doc.break && !doc.expandedStates) {
                      return "";
                    }
                    if (doc.contents.type === "group" && doc.contents.id === doc.id && doc.contents.break === doc.break && doc.contents.expandedStates === doc.expandedStates) {
                      return doc.contents;
                    }
                    break;
                  case "align":
                  case "indent":
                  case "indent-if-break":
                  case "line-suffix":
                    if (!doc.contents) {
                      return "";
                    }
                    break;
                  case "if-break":
                    if (!doc.flatContents && !doc.breakContents) {
                      return "";
                    }
                    break;
                }
                if (!isConcat(doc)) {
                  return doc;
                }
                const parts = [];
                for (const part of getDocParts(doc)) {
                  if (!part) {
                    continue;
                  }
                  const [currentPart, ...restParts] = isConcat(part) ? getDocParts(part) : [part];
                  if (typeof currentPart === "string" && typeof getLast(parts) === "string") {
                    parts[parts.length - 1] += currentPart;
                  } else {
                    parts.push(currentPart);
                  }
                  parts.push(...restParts);
                }
                if (parts.length === 0) {
                  return "";
                }
                if (parts.length === 1) {
                  return parts[0];
                }
                return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {
                  parts
                });
              }
              function cleanDoc(doc) {
                return mapDoc(doc, (currentDoc) => cleanDocFn(currentDoc));
              }
              function normalizeParts(parts) {
                const newParts = [];
                const restParts = parts.filter(Boolean);
                while (restParts.length > 0) {
                  const part = restParts.shift();
                  if (!part) {
                    continue;
                  }
                  if (isConcat(part)) {
                    restParts.unshift(...getDocParts(part));
                    continue;
                  }
                  if (newParts.length > 0 && typeof getLast(newParts) === "string" && typeof part === "string") {
                    newParts[newParts.length - 1] += part;
                    continue;
                  }
                  newParts.push(part);
                }
                return newParts;
              }
              function normalizeDoc(doc) {
                return mapDoc(doc, (currentDoc) => {
                  if (Array.isArray(currentDoc)) {
                    return normalizeParts(currentDoc);
                  }
                  if (!currentDoc.parts) {
                    return currentDoc;
                  }
                  return Object.assign(Object.assign({}, currentDoc), {}, {
                    parts: normalizeParts(currentDoc.parts)
                  });
                });
              }
              function replaceEndOfLine(doc) {
                return mapDoc(doc, (currentDoc) => typeof currentDoc === "string" && currentDoc.includes("\n") ? replaceTextEndOfLine(currentDoc) : currentDoc);
              }
              function replaceTextEndOfLine(text) {
                let replacement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : literalline;
                return join2(replacement, text.split("\n")).parts;
              }
              function canBreakFn(doc) {
                if (doc.type === "line") {
                  return true;
                }
              }
              function canBreak(doc) {
                return findInDoc(doc, canBreakFn, false);
              }
              module22.exports = {
                isConcat,
                getDocParts,
                willBreak,
                traverseDoc,
                findInDoc,
                mapDoc,
                propagateBreaks,
                removeLines,
                stripTrailingHardline,
                normalizeParts,
                normalizeDoc,
                cleanDoc,
                replaceTextEndOfLine,
                replaceEndOfLine,
                canBreak
              };
            }
          });
          var require_doc_printer = __commonJS22({
            "src/document/doc-printer.js"(exports22, module22) {
              "use strict";
              init_define_process();
              var {
                convertEndOfLineToChars
              } = require_end_of_line();
              var getLast = require_get_last();
              var getStringWidth = require_get_string_width();
              var {
                fill: fill2,
                cursor,
                indent: indent2
              } = require_doc_builders();
              var {
                isConcat,
                getDocParts
              } = require_doc_utils();
              var groupModeMap;
              var MODE_BREAK = 1;
              var MODE_FLAT = 2;
              function rootIndent() {
                return {
                  value: "",
                  length: 0,
                  queue: []
                };
              }
              function makeIndent(ind, options) {
                return generateInd(ind, {
                  type: "indent"
                }, options);
              }
              function makeAlign(indent22, widthOrDoc, options) {
                if (widthOrDoc === Number.NEGATIVE_INFINITY) {
                  return indent22.root || rootIndent();
                }
                if (widthOrDoc < 0) {
                  return generateInd(indent22, {
                    type: "dedent"
                  }, options);
                }
                if (!widthOrDoc) {
                  return indent22;
                }
                if (widthOrDoc.type === "root") {
                  return Object.assign(Object.assign({}, indent22), {}, {
                    root: indent22
                  });
                }
                const alignType = typeof widthOrDoc === "string" ? "stringAlign" : "numberAlign";
                return generateInd(indent22, {
                  type: alignType,
                  n: widthOrDoc
                }, options);
              }
              function generateInd(ind, newPart, options) {
                const queue = newPart.type === "dedent" ? ind.queue.slice(0, -1) : [...ind.queue, newPart];
                let value = "";
                let length = 0;
                let lastTabs = 0;
                let lastSpaces = 0;
                for (const part of queue) {
                  switch (part.type) {
                    case "indent":
                      flush();
                      if (options.useTabs) {
                        addTabs(1);
                      } else {
                        addSpaces(options.tabWidth);
                      }
                      break;
                    case "stringAlign":
                      flush();
                      value += part.n;
                      length += part.n.length;
                      break;
                    case "numberAlign":
                      lastTabs += 1;
                      lastSpaces += part.n;
                      break;
                    default:
                      throw new Error("Unexpected type '".concat(part.type, "'"));
                  }
                }
                flushSpaces();
                return Object.assign(Object.assign({}, ind), {}, {
                  value,
                  length,
                  queue
                });
                function addTabs(count) {
                  value += "	".repeat(count);
                  length += options.tabWidth * count;
                }
                function addSpaces(count) {
                  value += " ".repeat(count);
                  length += count;
                }
                function flush() {
                  if (options.useTabs) {
                    flushTabs();
                  } else {
                    flushSpaces();
                  }
                }
                function flushTabs() {
                  if (lastTabs > 0) {
                    addTabs(lastTabs);
                  }
                  resetLast();
                }
                function flushSpaces() {
                  if (lastSpaces > 0) {
                    addSpaces(lastSpaces);
                  }
                  resetLast();
                }
                function resetLast() {
                  lastTabs = 0;
                  lastSpaces = 0;
                }
              }
              function trim3(out) {
                if (out.length === 0) {
                  return 0;
                }
                let trimCount = 0;
                while (out.length > 0 && typeof getLast(out) === "string" && /^[\t ]*$/.test(getLast(out))) {
                  trimCount += out.pop().length;
                }
                if (out.length > 0 && typeof getLast(out) === "string") {
                  const trimmed = getLast(out).replace(/[\t ]*$/, "");
                  trimCount += getLast(out).length - trimmed.length;
                  out[out.length - 1] = trimmed;
                }
                return trimCount;
              }
              function fits(next, restCommands, width, options, hasLineSuffix, mustBeFlat) {
                let restIdx = restCommands.length;
                const cmds = [next];
                const out = [];
                while (width >= 0) {
                  if (cmds.length === 0) {
                    if (restIdx === 0) {
                      return true;
                    }
                    cmds.push(restCommands[restIdx - 1]);
                    restIdx--;
                    continue;
                  }
                  const [ind, mode, doc] = cmds.pop();
                  if (typeof doc === "string") {
                    out.push(doc);
                    width -= getStringWidth(doc);
                  } else if (isConcat(doc)) {
                    const parts = getDocParts(doc);
                    for (let i = parts.length - 1; i >= 0; i--) {
                      cmds.push([ind, mode, parts[i]]);
                    }
                  } else {
                    switch (doc.type) {
                      case "indent":
                        cmds.push([makeIndent(ind, options), mode, doc.contents]);
                        break;
                      case "align":
                        cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);
                        break;
                      case "trim":
                        width += trim3(out);
                        break;
                      case "group": {
                        if (mustBeFlat && doc.break) {
                          return false;
                        }
                        const groupMode = doc.break ? MODE_BREAK : mode;
                        cmds.push([ind, groupMode, doc.expandedStates && groupMode === MODE_BREAK ? getLast(doc.expandedStates) : doc.contents]);
                        if (doc.id) {
                          groupModeMap[doc.id] = groupMode;
                        }
                        break;
                      }
                      case "fill":
                        for (let i = doc.parts.length - 1; i >= 0; i--) {
                          cmds.push([ind, mode, doc.parts[i]]);
                        }
                        break;
                      case "if-break":
                      case "indent-if-break": {
                        const groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;
                        if (groupMode === MODE_BREAK) {
                          const breakContents = doc.type === "if-break" ? doc.breakContents : doc.negate ? doc.contents : indent2(doc.contents);
                          if (breakContents) {
                            cmds.push([ind, mode, breakContents]);
                          }
                        }
                        if (groupMode === MODE_FLAT) {
                          const flatContents = doc.type === "if-break" ? doc.flatContents : doc.negate ? indent2(doc.contents) : doc.contents;
                          if (flatContents) {
                            cmds.push([ind, mode, flatContents]);
                          }
                        }
                        break;
                      }
                      case "line":
                        switch (mode) {
                          case MODE_FLAT:
                            if (!doc.hard) {
                              if (!doc.soft) {
                                out.push(" ");
                                width -= 1;
                              }
                              break;
                            }
                            return true;
                          case MODE_BREAK:
                            return true;
                        }
                        break;
                      case "line-suffix":
                        hasLineSuffix = true;
                        break;
                      case "line-suffix-boundary":
                        if (hasLineSuffix) {
                          return false;
                        }
                        break;
                      case "label":
                        cmds.push([ind, mode, doc.contents]);
                        break;
                    }
                  }
                }
                return false;
              }
              function printDocToString(doc, options) {
                groupModeMap = {};
                const width = options.printWidth;
                const newLine = convertEndOfLineToChars(options.endOfLine);
                let pos = 0;
                const cmds = [[rootIndent(), MODE_BREAK, doc]];
                const out = [];
                let shouldRemeasure = false;
                let lineSuffix2 = [];
                while (cmds.length > 0) {
                  const [ind, mode, doc2] = cmds.pop();
                  if (typeof doc2 === "string") {
                    const formatted = newLine !== "\n" ? doc2.replace(/\n/g, newLine) : doc2;
                    out.push(formatted);
                    pos += getStringWidth(formatted);
                  } else if (isConcat(doc2)) {
                    const parts = getDocParts(doc2);
                    for (let i = parts.length - 1; i >= 0; i--) {
                      cmds.push([ind, mode, parts[i]]);
                    }
                  } else {
                    switch (doc2.type) {
                      case "cursor":
                        out.push(cursor.placeholder);
                        break;
                      case "indent":
                        cmds.push([makeIndent(ind, options), mode, doc2.contents]);
                        break;
                      case "align":
                        cmds.push([makeAlign(ind, doc2.n, options), mode, doc2.contents]);
                        break;
                      case "trim":
                        pos -= trim3(out);
                        break;
                      case "group":
                        switch (mode) {
                          case MODE_FLAT:
                            if (!shouldRemeasure) {
                              cmds.push([ind, doc2.break ? MODE_BREAK : MODE_FLAT, doc2.contents]);
                              break;
                            }
                          case MODE_BREAK: {
                            shouldRemeasure = false;
                            const next = [ind, MODE_FLAT, doc2.contents];
                            const rem = width - pos;
                            const hasLineSuffix = lineSuffix2.length > 0;
                            if (!doc2.break && fits(next, cmds, rem, options, hasLineSuffix)) {
                              cmds.push(next);
                            } else {
                              if (doc2.expandedStates) {
                                const mostExpanded = getLast(doc2.expandedStates);
                                if (doc2.break) {
                                  cmds.push([ind, MODE_BREAK, mostExpanded]);
                                  break;
                                } else {
                                  for (let i = 1; i < doc2.expandedStates.length + 1; i++) {
                                    if (i >= doc2.expandedStates.length) {
                                      cmds.push([ind, MODE_BREAK, mostExpanded]);
                                      break;
                                    } else {
                                      const state = doc2.expandedStates[i];
                                      const cmd = [ind, MODE_FLAT, state];
                                      if (fits(cmd, cmds, rem, options, hasLineSuffix)) {
                                        cmds.push(cmd);
                                        break;
                                      }
                                    }
                                  }
                                }
                              } else {
                                cmds.push([ind, MODE_BREAK, doc2.contents]);
                              }
                            }
                            break;
                          }
                        }
                        if (doc2.id) {
                          groupModeMap[doc2.id] = getLast(cmds)[1];
                        }
                        break;
                      case "fill": {
                        const rem = width - pos;
                        const {
                          parts
                        } = doc2;
                        if (parts.length === 0) {
                          break;
                        }
                        const [content, whitespace] = parts;
                        const contentFlatCmd = [ind, MODE_FLAT, content];
                        const contentBreakCmd = [ind, MODE_BREAK, content];
                        const contentFits = fits(contentFlatCmd, [], rem, options, lineSuffix2.length > 0, true);
                        if (parts.length === 1) {
                          if (contentFits) {
                            cmds.push(contentFlatCmd);
                          } else {
                            cmds.push(contentBreakCmd);
                          }
                          break;
                        }
                        const whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];
                        const whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];
                        if (parts.length === 2) {
                          if (contentFits) {
                            cmds.push(whitespaceFlatCmd, contentFlatCmd);
                          } else {
                            cmds.push(whitespaceBreakCmd, contentBreakCmd);
                          }
                          break;
                        }
                        parts.splice(0, 2);
                        const remainingCmd = [ind, mode, fill2(parts)];
                        const secondContent = parts[0];
                        const firstAndSecondContentFlatCmd = [ind, MODE_FLAT, [content, whitespace, secondContent]];
                        const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, options, lineSuffix2.length > 0, true);
                        if (firstAndSecondContentFits) {
                          cmds.push(remainingCmd, whitespaceFlatCmd, contentFlatCmd);
                        } else if (contentFits) {
                          cmds.push(remainingCmd, whitespaceBreakCmd, contentFlatCmd);
                        } else {
                          cmds.push(remainingCmd, whitespaceBreakCmd, contentBreakCmd);
                        }
                        break;
                      }
                      case "if-break":
                      case "indent-if-break": {
                        const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] : mode;
                        if (groupMode === MODE_BREAK) {
                          const breakContents = doc2.type === "if-break" ? doc2.breakContents : doc2.negate ? doc2.contents : indent2(doc2.contents);
                          if (breakContents) {
                            cmds.push([ind, mode, breakContents]);
                          }
                        }
                        if (groupMode === MODE_FLAT) {
                          const flatContents = doc2.type === "if-break" ? doc2.flatContents : doc2.negate ? indent2(doc2.contents) : doc2.contents;
                          if (flatContents) {
                            cmds.push([ind, mode, flatContents]);
                          }
                        }
                        break;
                      }
                      case "line-suffix":
                        lineSuffix2.push([ind, mode, doc2.contents]);
                        break;
                      case "line-suffix-boundary":
                        if (lineSuffix2.length > 0) {
                          cmds.push([ind, mode, {
                            type: "line",
                            hard: true
                          }]);
                        }
                        break;
                      case "line":
                        switch (mode) {
                          case MODE_FLAT:
                            if (!doc2.hard) {
                              if (!doc2.soft) {
                                out.push(" ");
                                pos += 1;
                              }
                              break;
                            } else {
                              shouldRemeasure = true;
                            }
                          case MODE_BREAK:
                            if (lineSuffix2.length > 0) {
                              cmds.push([ind, mode, doc2], ...lineSuffix2.reverse());
                              lineSuffix2 = [];
                              break;
                            }
                            if (doc2.literal) {
                              if (ind.root) {
                                out.push(newLine, ind.root.value);
                                pos = ind.root.length;
                              } else {
                                out.push(newLine);
                                pos = 0;
                              }
                            } else {
                              pos -= trim3(out);
                              out.push(newLine + ind.value);
                              pos = ind.length;
                            }
                            break;
                        }
                        break;
                      case "label":
                        cmds.push([ind, mode, doc2.contents]);
                        break;
                      default:
                    }
                  }
                  if (cmds.length === 0 && lineSuffix2.length > 0) {
                    cmds.push(...lineSuffix2.reverse());
                    lineSuffix2 = [];
                  }
                }
                const cursorPlaceholderIndex = out.indexOf(cursor.placeholder);
                if (cursorPlaceholderIndex !== -1) {
                  const otherCursorPlaceholderIndex = out.indexOf(cursor.placeholder, cursorPlaceholderIndex + 1);
                  const beforeCursor = out.slice(0, cursorPlaceholderIndex).join("");
                  const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join("");
                  const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join("");
                  return {
                    formatted: beforeCursor + aroundCursor + afterCursor,
                    cursorNodeStart: beforeCursor.length,
                    cursorNodeText: aroundCursor
                  };
                }
                return {
                  formatted: out.join("")
                };
              }
              module22.exports = {
                printDocToString
              };
            }
          });
          var require_doc_debug = __commonJS22({
            "src/document/doc-debug.js"(exports22, module22) {
              "use strict";
              init_define_process();
              var {
                isConcat,
                getDocParts
              } = require_doc_utils();
              function flattenDoc(doc) {
                if (!doc) {
                  return "";
                }
                if (isConcat(doc)) {
                  const res = [];
                  for (const part of getDocParts(doc)) {
                    if (isConcat(part)) {
                      res.push(...flattenDoc(part).parts);
                    } else {
                      const flattened = flattenDoc(part);
                      if (flattened !== "") {
                        res.push(flattened);
                      }
                    }
                  }
                  return {
                    type: "concat",
                    parts: res
                  };
                }
                if (doc.type === "if-break") {
                  return Object.assign(Object.assign({}, doc), {}, {
                    breakContents: flattenDoc(doc.breakContents),
                    flatContents: flattenDoc(doc.flatContents)
                  });
                }
                if (doc.type === "group") {
                  return Object.assign(Object.assign({}, doc), {}, {
                    contents: flattenDoc(doc.contents),
                    expandedStates: doc.expandedStates && doc.expandedStates.map(flattenDoc)
                  });
                }
                if (doc.type === "fill") {
                  return {
                    type: "fill",
                    parts: doc.parts.map(flattenDoc)
                  };
                }
                if (doc.contents) {
                  return Object.assign(Object.assign({}, doc), {}, {
                    contents: flattenDoc(doc.contents)
                  });
                }
                return doc;
              }
              function printDocToDebug(doc) {
                const printedSymbols = /* @__PURE__ */ Object.create(null);
                const usedKeysForSymbols = /* @__PURE__ */ new Set();
                return printDoc(flattenDoc(doc));
                function printDoc(doc2, index, parentParts) {
                  if (typeof doc2 === "string") {
                    return JSON.stringify(doc2);
                  }
                  if (isConcat(doc2)) {
                    const printed = getDocParts(doc2).map(printDoc).filter(Boolean);
                    return printed.length === 1 ? printed[0] : "[".concat(printed.join(", "), "]");
                  }
                  if (doc2.type === "line") {
                    const withBreakParent = Array.isArray(parentParts) && parentParts[index + 1] && parentParts[index + 1].type === "break-parent";
                    if (doc2.literal) {
                      return withBreakParent ? "literalline" : "literallineWithoutBreakParent";
                    }
                    if (doc2.hard) {
                      return withBreakParent ? "hardline" : "hardlineWithoutBreakParent";
                    }
                    if (doc2.soft) {
                      return "softline";
                    }
                    return "line";
                  }
                  if (doc2.type === "break-parent") {
                    const afterHardline = Array.isArray(parentParts) && parentParts[index - 1] && parentParts[index - 1].type === "line" && parentParts[index - 1].hard;
                    return afterHardline ? void 0 : "breakParent";
                  }
                  if (doc2.type === "trim") {
                    return "trim";
                  }
                  if (doc2.type === "indent") {
                    return "indent(" + printDoc(doc2.contents) + ")";
                  }
                  if (doc2.type === "align") {
                    return doc2.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + printDoc(doc2.contents) + ")" : doc2.n < 0 ? "dedent(" + printDoc(doc2.contents) + ")" : doc2.n.type === "root" ? "markAsRoot(" + printDoc(doc2.contents) + ")" : "align(" + JSON.stringify(doc2.n) + ", " + printDoc(doc2.contents) + ")";
                  }
                  if (doc2.type === "if-break") {
                    return "ifBreak(" + printDoc(doc2.breakContents) + (doc2.flatContents ? ", " + printDoc(doc2.flatContents) : "") + (doc2.groupId ? (!doc2.flatContents ? ', ""' : "") + ", { groupId: ".concat(printGroupId(doc2.groupId), " }") : "") + ")";
                  }
                  if (doc2.type === "indent-if-break") {
                    const optionsParts = [];
                    if (doc2.negate) {
                      optionsParts.push("negate: true");
                    }
                    if (doc2.groupId) {
                      optionsParts.push("groupId: ".concat(printGroupId(doc2.groupId)));
                    }
                    const options = optionsParts.length > 0 ? ", { ".concat(optionsParts.join(", "), " }") : "";
                    return "indentIfBreak(".concat(printDoc(doc2.contents)).concat(options, ")");
                  }
                  if (doc2.type === "group") {
                    const optionsParts = [];
                    if (doc2.break && doc2.break !== "propagated") {
                      optionsParts.push("shouldBreak: true");
                    }
                    if (doc2.id) {
                      optionsParts.push("id: ".concat(printGroupId(doc2.id)));
                    }
                    const options = optionsParts.length > 0 ? ", { ".concat(optionsParts.join(", "), " }") : "";
                    if (doc2.expandedStates) {
                      return "conditionalGroup([".concat(doc2.expandedStates.map((part) => printDoc(part)).join(","), "]").concat(options, ")");
                    }
                    return "group(".concat(printDoc(doc2.contents)).concat(options, ")");
                  }
                  if (doc2.type === "fill") {
                    return "fill([".concat(doc2.parts.map((part) => printDoc(part)).join(", "), "])");
                  }
                  if (doc2.type === "line-suffix") {
                    return "lineSuffix(" + printDoc(doc2.contents) + ")";
                  }
                  if (doc2.type === "line-suffix-boundary") {
                    return "lineSuffixBoundary";
                  }
                  if (doc2.type === "label") {
                    return "label(".concat(JSON.stringify(doc2.label), ", ").concat(printDoc(doc2.contents), ")");
                  }
                  throw new Error("Unknown doc type " + doc2.type);
                }
                function printGroupId(id) {
                  if (typeof id !== "symbol") {
                    return JSON.stringify(String(id));
                  }
                  if (id in printedSymbols) {
                    return printedSymbols[id];
                  }
                  const prefix = String(id).slice(7, -1) || "symbol";
                  for (let counter = 0; ; counter++) {
                    const key = prefix + (counter > 0 ? " #".concat(counter) : "");
                    if (!usedKeysForSymbols.has(key)) {
                      usedKeysForSymbols.add(key);
                      return printedSymbols[id] = "Symbol.for(".concat(JSON.stringify(key), ")");
                    }
                  }
                }
              }
              module22.exports = {
                printDocToDebug
              };
            }
          });
          init_define_process();
          module2.exports = {
            builders: require_doc_builders(),
            printer: require_doc_printer(),
            utils: require_doc_utils(),
            debug: require_doc_debug()
          };
        }
      });
      "use strict";
      return require_doc2();
    });
  }
});

// libs/printer/common.ts
var import_doc = __toESM(require_doc(), 1);
import { printRaw } from "@unified-latex/unified-latex-util-print-raw";
import { match } from "@unified-latex/unified-latex-util-match";
function formatEnvSurround(node) {
  const env = printRaw(node.env);
  return {
    envName: env,
    start: ESCAPE + "begin{" + env + "}",
    end: ESCAPE + "end{" + env + "}"
  };
}
function isLineType(elm) {
  if (elm == null || typeof elm === "string") {
    return false;
  }
  if (Array.isArray(elm)) {
    return isLineType(elm[0]);
  }
  if (elm.type === "concat") {
    return isLineType(elm.parts);
  }
  return elm.type === "line";
}
function joinWithSoftline(arr) {
  if (arr.length === 0 || arr.length === 1) {
    return arr;
  }
  const ret = [arr[0]];
  for (let i = 1; i < arr.length; i++) {
    const prevNode = arr[i - 1];
    const nextNode = arr[i];
    if (!isLineType(prevNode) && !isLineType(nextNode)) {
      ret.push(softline);
    }
    ret.push(nextNode);
  }
  return ret;
}
function getNodeInfo(node, options) {
  const renderInfo = node._renderInfo || {};
  const previousNode = options.referenceMap && options.referenceMap.getPreviousNode(node);
  const nextNode = options.referenceMap && options.referenceMap.getNextNode(node);
  const renderCache = options.referenceMap && options.referenceMap.getRenderCache(node);
  return {
    renderInfo,
    renderCache,
    previousNode,
    nextNode,
    referenceMap: options.referenceMap
  };
}
var ESCAPE = "\\";
var {
  group,
  fill,
  ifBreak,
  line,
  softline,
  hardline,
  lineSuffix,
  lineSuffixBoundary,
  breakParent,
  indent,
  markAsRoot,
  join
} = import_doc.builders;
function formatDocArray(nodes, docArray, options) {
  const ret = [];
  for (let i = 0; i < nodes.length; i++) {
    const rawNode = nodes[i];
    const printedNode = docArray[i];
    const { renderInfo, referenceMap, previousNode, nextNode } = getNodeInfo(rawNode, options);
    const renderCache = referenceMap && referenceMap.getRenderCache(rawNode);
    switch (rawNode.type) {
      case "comment":
        if (!rawNode.sameline && previousNode && !match.comment(previousNode) && !match.parbreak(previousNode)) {
          ret.push(hardline);
        }
        ret.push(printedNode);
        if (nextNode && !rawNode.suffixParbreak) {
          ret.push(hardline);
        }
        break;
      case "environment":
      case "displaymath":
      case "mathenv":
        if (previousNode && (previousNode == null ? void 0 : previousNode.type) !== "parbreak") {
          if (ret[ret.length - 1] === line) {
            ret.pop();
          }
          if (ret[ret.length - 1] !== hardline) {
            ret.push(hardline);
          }
        }
        ret.push(printedNode);
        if ((nextNode == null ? void 0 : nextNode.type) === "whitespace") {
          ret.push(hardline);
          i++;
        }
        break;
      case "macro":
        if (renderInfo.breakBefore || renderInfo.breakAround) {
          if (previousNode) {
            if (ret[ret.length - 1] === line || ret[ret.length - 1] === hardline) {
              ret.pop();
              ret.push(hardline);
            } else if (!match.comment(previousNode) && !match.parbreak(previousNode)) {
              ret.push(hardline);
            }
          }
        }
        if (renderInfo.inParMode && !renderInfo.hangingIndent && renderCache) {
          ret.push(renderCache.content, ...renderCache.rawArgs || []);
        } else {
          ret.push(printedNode);
        }
        if (renderInfo.breakAfter || renderInfo.breakAround) {
          if (nextNode) {
            if (match.whitespace(nextNode)) {
              ret.push(hardline);
              i++;
            } else if (match.parbreak(nextNode)) {
            } else if (!match.comment(nextNode)) {
              ret.push(hardline);
            }
          }
        }
        break;
      case "parbreak":
        ret.push(hardline, hardline);
        break;
      default:
        ret.push(printedNode);
        break;
    }
  }
  return ret;
}

// libs/zip.ts
function zip(array1, array2) {
  const ret = [];
  const len = Math.min(array1.length, array2.length);
  for (let i = 0; i < len; i++) {
    ret.push([array1[i], array2[i]]);
  }
  return ret;
}

// libs/printer/macro.ts
function printMacro(path, print, options) {
  const node = path.getNode();
  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(node, options);
  const content = (node.escapeToken != null ? node.escapeToken : ESCAPE) + node.content;
  const args = node.args ? path.map(print, "args") : [];
  const rawArgs = [];
  for (const [arg, printedArg] of zip(node.args || [], args)) {
    const renderCache = referenceMap && referenceMap.getRenderCache(arg);
    if (renderInfo.inParMode && renderCache) {
      rawArgs.push(...renderCache);
    } else {
      rawArgs.push(printedArg);
    }
  }
  if (referenceMap) {
    referenceMap.setRenderCache(node, { rawArgs, content });
  }
  if (renderInfo.hangingIndent) {
    return indent(fill([content, ...rawArgs]));
  }
  return group([content, ...rawArgs]);
}

// libs/printer/argument.ts
import {
  linebreak,
  printRaw as printRaw2
} from "@unified-latex/unified-latex-util-print-raw";
import { parsePgfkeys } from "@unified-latex/unified-latex-util-pgfkeys";
import { match as match2 } from "@unified-latex/unified-latex-util-match";
import { trim } from "@unified-latex/unified-latex-util-trim";
function printArgument(path, print, options) {
  const node = path.getNode();
  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(node, options);
  if (node.openMark === "" && node.closeMark === "" && node.content.length === 0) {
    return [];
  }
  const openMark = node.openMark;
  const closeMark = node.closeMark;
  let content = path.map(print, "content");
  content = formatDocArray(node.content, content, options);
  if (match2.comment(node.content[node.content.length - 1])) {
    content.push(hardline);
  }
  let rawRet = [openMark, fill(content), closeMark];
  if (renderInfo.inParMode) {
    rawRet = [openMark, ...content, closeMark];
  }
  if (referenceMap) {
    referenceMap.setRenderCache(node, rawRet);
  }
  if (path.getParentNode()) {
    const parentNode = path.getParentNode();
    const { renderInfo: parentRenderInfo } = getNodeInfo(parentNode, options);
    if (parentRenderInfo.pgfkeysArgs) {
      const leadingComment = node.content.length > 0 && match2.comment(node.content[0]) && node.content[0].sameline ? node.content[0] : null;
      const content2 = leadingComment ? node.content.slice(1) : node.content;
      trim(content2);
      return printPgfkeysArgument(content2, {
        openMark: node.openMark,
        closeMark: node.closeMark,
        leadingComment
      });
    }
  }
  return rawRet;
}
function printPgfkeysArgument(nodes, braces) {
  const parsed = parsePgfkeys(nodes);
  const content = [];
  for (const part of parsed) {
    const isLastItem = part === parsed[parsed.length - 1];
    if (part.itemParts) {
      const parts = part.itemParts.map((node) => printRaw2(node, { asArray: true }).map((token) => token === linebreak ? hardline : token));
      const row = join("=", parts);
      content.push(row);
      if (part.trailingComma) {
        content.push(",");
      }
    }
    if (part.trailingComment) {
      const leadingContent = part.itemParts ? [" "] : [];
      if (part.leadingParbreak) {
        leadingContent.push(hardline);
      }
      content.push(...leadingContent, "%", part.trailingComment.content, breakParent);
    }
    if (!isLastItem) {
      content.push(line);
    }
  }
  let leadingComment = [""];
  if (braces.leadingComment) {
    if (braces.leadingComment.leadingWhitespace) {
      leadingComment.push(" ");
    }
    leadingComment.push("%" + braces.leadingComment.content, breakParent);
  }
  return group([
    braces.openMark,
    ...leadingComment,
    content.length > 0 ? indent([softline, ...content]) : "",
    softline,
    braces.closeMark
  ]);
}

// libs/printer/root.ts
import { match as match3 } from "@unified-latex/unified-latex-util-match";
function hasPreambleCode(nodes) {
  return nodes.some((node) => match3.macro(node, "documentclass"));
}
function printRoot(path, print, options) {
  const node = path.getNode();
  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(node, options);
  const content = path.map(print, "content");
  const rawContent = formatDocArray(node.content, content, options);
  const concatFunction = hasPreambleCode(node.content) ? (x) => x : fill;
  return concatFunction(rawContent);
}

// libs/printer/comment.ts
import { printRaw as printRaw3 } from "@unified-latex/unified-latex-util-print-raw";
function printComment(path, _print, _options) {
  const node = path.getNode();
  let leadingWhitespace = "";
  if (node.leadingWhitespace && node.sameline) {
    leadingWhitespace = " ";
  }
  const content = [leadingWhitespace, "%" + printRaw3(node.content)];
  return content;
}

// libs/printer/math.ts
function printInlineMath(path, print, options) {
  const node = path.getNode();
  if (node.content.length === 0) {
    return ["$", " ", "$"];
  }
  let content = path.map(print, "content");
  content = formatDocArray(node.content, content, options);
  content = joinWithSoftline(content);
  if (node.content[node.content.length - 1].type === "comment") {
    content.push(hardline);
  }
  return fill(["$", ...content, "$"]);
}
function printDisplayMath(path, print, options) {
  const node = path.getNode();
  let content = path.map(print, "content");
  content = formatDocArray(node.content, content, options);
  content = joinWithSoftline(content);
  const bodyStartToken = [hardline];
  if (node.content.length === 0 || node.content[0].type === "comment" && node.content[0].sameline) {
    bodyStartToken.pop();
  }
  return [
    ESCAPE + "[",
    indent(fill(bodyStartToken.concat(content))),
    hardline,
    ESCAPE + "]"
  ];
}

// libs/printer/environment.ts
import { printRaw as printRaw4 } from "@unified-latex/unified-latex-util-print-raw";
import { parseAlignEnvironment } from "@unified-latex/unified-latex-util-align";
import { trim as trim2 } from "@unified-latex/unified-latex-util-trim";
function printVerbatimEnvironment(path, print, options) {
  const node = path.getNode();
  const env = formatEnvSurround(node);
  return [env.start, node.content, env.end];
}
function printEnvironment(path, print, options) {
  const node = path.getNode();
  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(node, options);
  const args = node.args ? path.map(print, "args") : [];
  const env = formatEnvSurround(node);
  let content = path.map(print, "content");
  content = formatDocArray(node.content, content, options);
  if (renderInfo.inMathMode) {
    content = joinWithSoftline(content);
  }
  let bodyStartToken = [hardline];
  if (node.content.length === 0 || node.content[0].type === "comment" && node.content[0].sameline) {
    bodyStartToken.pop();
  }
  return [
    env.start,
    ...args,
    indent(fill(bodyStartToken.concat(content))),
    hardline,
    env.end
  ];
}
function printAlignedEnvironment(path, print, options) {
  const node = path.getNode();
  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(node, options);
  const args = node.args ? path.map(print, "args") : [];
  const env = formatEnvSurround(node);
  const leadingComment = node.content[0] && node.content[0].type === "comment" && node.content[0].sameline ? node.content[0] : null;
  const { rows, rowSeps, trailingComments } = formatAlignedContent(leadingComment ? node.content.slice(1) : node.content);
  const content = [];
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const rowSep = rowSeps[i];
    const trailingComment = trailingComments[i];
    content.push(row);
    if (rowSep) {
      content.push(printRaw4(rowSep));
    }
    if (rowSep && trailingComment) {
      content.push(" ");
    }
    if (trailingComment) {
      content.push(["%", printRaw4(trailingComment.content)]);
    }
    if (rowSep || trailingComment) {
      content.push(hardline);
    }
  }
  if (content[content.length - 1] === hardline) {
    content.pop();
  }
  if (leadingComment) {
    content.unshift(leadingComment.leadingWhitespace ? " " : "", "%" + printRaw4(leadingComment.content), hardline);
    return [env.start, ...args, indent(content), hardline, env.end];
  }
  return [
    env.start,
    ...args,
    indent([hardline, ...content]),
    hardline,
    env.end
  ];
}
function formatAlignedContent(nodes) {
  function getSpace(len = 1) {
    return " ".repeat(len);
  }
  const rows = parseAlignEnvironment(nodes);
  const numCols = Math.max(...rows.map((r) => r.cells.length));
  const rowSeps = rows.map(({ rowSep }) => printRaw4(rowSep || []));
  const trailingComments = rows.map(({ trailingComment }) => trailingComment);
  const renderedRows = rows.map(({ cells, colSeps }) => ({
    cells: cells.map((nodes2) => {
      trim2(nodes2);
      return printRaw4(nodes2);
    }),
    seps: colSeps.map((nodes2) => printRaw4(nodes2))
  }));
  const colWidths = [];
  for (let i = 0; i < numCols; i++) {
    colWidths.push(Math.max(...renderedRows.map(({ cells, seps }) => ((cells[i] || "") + (seps[i] || "")).length)));
  }
  const joinedRows = renderedRows.map(({ cells, seps }) => {
    if (cells.length === 1 && cells[0] === "") {
      return "";
    }
    let ret = "";
    for (let i = 0; i < cells.length; i++) {
      const width = colWidths[i] - (seps[i] || "").length;
      ret += (i === 0 ? "" : " ") + cells[i] + getSpace(width - cells[i].length + 1) + (seps[i] || "");
    }
    return ret;
  });
  return { rows: joinedRows, rowSeps, trailingComments };
}

// libs/printer/printer.ts
import {
  linebreak as linebreak2,
  printRaw as printRaw5
} from "@unified-latex/unified-latex-util-print-raw";

// libs/reference-map.ts
import { visit } from "@unified-latex/unified-latex-util-visit";
var ReferenceMap = class {
  constructor(ast) {
    this.ast = ast;
    this.map = /* @__PURE__ */ new Map();
    visit(this.ast, (nodeList) => {
      for (let i = 0; i < nodeList.length; i++) {
        this.map.set(nodeList[i], {
          previous: nodeList[i - 1],
          next: nodeList[i + 1]
        });
      }
    }, { includeArrays: true, test: Array.isArray });
  }
  setRenderCache(node, data) {
    const currData = this.map.get(node) || {};
    this.map.set(node, __spreadProps(__spreadValues({}, currData), { renderCache: data }));
  }
  getRenderCache(node) {
    var _a;
    return (_a = this.map.get(node)) == null ? void 0 : _a.renderCache;
  }
  getPreviousNode(node) {
    return (this.map.get(node) || {}).previous;
  }
  getNextNode(node) {
    return (this.map.get(node) || {}).next;
  }
};

// libs/printer/printer.ts
function printLatexAst(path, options, print) {
  const node = path.getValue();
  const { renderInfo } = getNodeInfo(node, options);
  if (node == null) {
    return node;
  }
  if (typeof node === "string") {
    return node;
  }
  switch (node.type) {
    case "root":
      if (options.referenceMap) {
        console.warn("Processing root node, but ReferenceMap already exists. Are there multiple nodes of type 'root'?");
      }
      options.referenceMap = new ReferenceMap(node);
      return printRoot(path, print, options);
    case "argument":
      return printArgument(path, print, options);
    case "comment":
      return printComment(path, print, options);
    case "environment":
    case "mathenv":
      if (renderInfo.alignContent) {
        return printAlignedEnvironment(path, print, options);
      }
      return printEnvironment(path, print, options);
    case "displaymath":
      return printDisplayMath(path, print, options);
    case "group":
      const content = printRaw5(node.content, {
        asArray: true
      }).map((token) => token === linebreak2 ? hardline : token);
      return ["{", ...content, "}"];
    case "inlinemath":
      return printInlineMath(path, print, options);
    case "macro":
      return printMacro(path, print, options);
    case "parbreak":
      return [hardline, hardline];
    case "string":
      return node.content;
    case "verb":
      return [
        ESCAPE,
        node.env,
        node.escape,
        printRaw5(node.content),
        node.escape
      ];
    case "verbatim":
      return printVerbatimEnvironment(path, print, options);
    case "whitespace":
      return line;
    default:
      console.warn("Printing unknown type", node);
      return printRaw5(node);
  }
}

// libs/prettier-plugin-latex.ts
import { parse } from "@unified-latex/unified-latex-util-parse";
var languages = [
  {
    name: "latex",
    extensions: [".tex"],
    parsers: ["latex-parser"]
  }
];
var parsers = {
  "latex-parser": {
    parse,
    astFormat: "latex-ast",
    locStart: (node) => node.position ? node.position.start.offset : 0,
    locEnd: (node) => node.position ? node.position.end.offset : 1
  }
};
var printers = {
  "latex-ast": {
    print: printLatexAst
  }
};
var prettierPluginLatex = { languages, parsers, printers };
export {
  prettierPluginLatex,
  printLatexAst,
  printLatexAst as printer
};
//# sourceMappingURL=index.js.map
